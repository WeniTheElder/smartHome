
smartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000236  00800060  00001c2e  00001cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800296  00800296  00001ef8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003485  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001073  00000000  00000000  00005761  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dd2  00000000  00000000  000067d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000868  00000000  00000000  000085a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eea  00000000  00000000  00008e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001da6  00000000  00000000  00009cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000baa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_10>
      2c:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	8b 00       	.word	0x008b	; ????
      56:	a0 00       	.word	0x00a0	; ????
      58:	b5 00       	.word	0x00b5	; ????
      5a:	ca 00       	.word	0x00ca	; ????
      5c:	df 00       	.word	0x00df	; ????
      5e:	f4 00       	.word	0x00f4	; ????
      60:	09 01       	movw	r0, r18
      62:	1e 01       	movw	r2, r28

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	12 e0       	ldi	r17, 0x02	; 2
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e2       	ldi	r30, 0x2E	; 46
      78:	fc e1       	ldi	r31, 0x1C	; 28
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	22 e0       	ldi	r18, 0x02	; 2
      88:	a6 e9       	ldi	r26, 0x96	; 150
      8a:	b2 e0       	ldi	r27, 0x02	; 2
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ac 39       	cpi	r26, 0x9C	; 156
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 90 05 	call	0xb20	; 0xb20 <main>
      9a:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <ADC_voidInit>:
#include "ADC_registers.h"
#include "DIO_interface.h"


void ADC_voidInit(u8 copy_u8VrefType){
	switch(copy_u8VrefType){
      a2:	81 30       	cpi	r24, 0x01	; 1
      a4:	59 f0       	breq	.+22     	; 0xbc <ADC_voidInit+0x1a>
      a6:	18 f0       	brcs	.+6      	; 0xae <ADC_voidInit+0xc>
      a8:	82 30       	cpi	r24, 0x02	; 2
      aa:	79 f0       	breq	.+30     	; 0xca <ADC_voidInit+0x28>
      ac:	14 c0       	rjmp	.+40     	; 0xd6 <ADC_voidInit+0x34>
		case ADC_AREF:
		CLEAR_BIT(ADMUX_REGISTER,ADC_REFS0_BIT);
      ae:	87 b1       	in	r24, 0x07	; 7
      b0:	8f 7b       	andi	r24, 0xBF	; 191
      b2:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_REFS1_BIT);
      b4:	87 b1       	in	r24, 0x07	; 7
      b6:	8f 77       	andi	r24, 0x7F	; 127
      b8:	87 b9       	out	0x07, r24	; 7
		break;
      ba:	0d c0       	rjmp	.+26     	; 0xd6 <ADC_voidInit+0x34>
		case ADC_AVCC:
		SET_BIT  (ADMUX_REGISTER,ADC_REFS0_BIT);
      bc:	87 b1       	in	r24, 0x07	; 7
      be:	80 64       	ori	r24, 0x40	; 64
      c0:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_REFS1_BIT);
      c2:	87 b1       	in	r24, 0x07	; 7
      c4:	8f 77       	andi	r24, 0x7F	; 127
      c6:	87 b9       	out	0x07, r24	; 7
		break;
      c8:	06 c0       	rjmp	.+12     	; 0xd6 <ADC_voidInit+0x34>
		case ADC_INTERNAL_VREF:
		SET_BIT  (ADMUX_REGISTER,ADC_REFS0_BIT);
      ca:	87 b1       	in	r24, 0x07	; 7
      cc:	80 64       	ori	r24, 0x40	; 64
      ce:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_REFS1_BIT);
      d0:	87 b1       	in	r24, 0x07	; 7
      d2:	80 68       	ori	r24, 0x80	; 128
      d4:	87 b9       	out	0x07, r24	; 7
		break;
	}
	//choosing right adjustment 
	CLEAR_BIT(ADMUX_REGISTER,ADC_ADLAR_BIT);
      d6:	87 b1       	in	r24, 0x07	; 7
      d8:	8f 7d       	andi	r24, 0xDF	; 223
      da:	87 b9       	out	0x07, r24	; 7
	
	//enable ADC
	SET_BIT  (ADCSRA_REGISTER,ADC_ADEN_BIT);
      dc:	86 b1       	in	r24, 0x06	; 6
      de:	80 68       	ori	r24, 0x80	; 128
      e0:	86 b9       	out	0x06, r24	; 6
	
	//disable auto trigger
	CLEAR_BIT(ADCSRA_REGISTER,ADC_ADATE_BIT);
      e2:	86 b1       	in	r24, 0x06	; 6
      e4:	8f 7d       	andi	r24, 0xDF	; 223
      e6:	86 b9       	out	0x06, r24	; 6
	
	//disable ADC interrupt
	CLEAR_BIT(ADCSRA_REGISTER,ADC_ADIE_BIT);
      e8:	86 b1       	in	r24, 0x06	; 6
      ea:	87 7f       	andi	r24, 0xF7	; 247
      ec:	86 b9       	out	0x06, r24	; 6
	
	//setting prescaler to /128
	SET_BIT(ADCSRA_REGISTER,ADC_ADPS2_BIT);
      ee:	86 b1       	in	r24, 0x06	; 6
      f0:	84 60       	ori	r24, 0x04	; 4
      f2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REGISTER,ADC_ADPS1_BIT);
      f4:	86 b1       	in	r24, 0x06	; 6
      f6:	82 60       	ori	r24, 0x02	; 2
      f8:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REGISTER,ADC_ADPS0_BIT);
      fa:	86 b1       	in	r24, 0x06	; 6
      fc:	81 60       	ori	r24, 0x01	; 1
      fe:	86 b9       	out	0x06, r24	; 6
     100:	08 95       	ret

00000102 <ADC_u16GetAdcResult>:
	
}
u16  ADC_u16GetAdcResult(u8 copy_u8AdcChannelId){
	switch(copy_u8AdcChannelId){
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	88 30       	cpi	r24, 0x08	; 8
     106:	91 05       	cpc	r25, r1
     108:	08 f0       	brcs	.+2      	; 0x10c <ADC_u16GetAdcResult+0xa>
     10a:	ac c0       	rjmp	.+344    	; 0x264 <ADC_u16GetAdcResult+0x162>
     10c:	fc 01       	movw	r30, r24
     10e:	e6 5d       	subi	r30, 0xD6	; 214
     110:	ff 4f       	sbci	r31, 0xFF	; 255
     112:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__tablejump2__>
		case ADC_ADC0:
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX0_BIT);
     116:	87 b1       	in	r24, 0x07	; 7
     118:	8e 7f       	andi	r24, 0xFE	; 254
     11a:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX1_BIT);
     11c:	87 b1       	in	r24, 0x07	; 7
     11e:	8d 7f       	andi	r24, 0xFD	; 253
     120:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX2_BIT);
     122:	87 b1       	in	r24, 0x07	; 7
     124:	8b 7f       	andi	r24, 0xFB	; 251
     126:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
     128:	87 b1       	in	r24, 0x07	; 7
     12a:	87 7f       	andi	r24, 0xF7	; 247
     12c:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
     12e:	87 b1       	in	r24, 0x07	; 7
     130:	8f 7e       	andi	r24, 0xEF	; 239
     132:	87 b9       	out	0x07, r24	; 7
		DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT);
     134:	40 e0       	ldi	r20, 0x00	; 0
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
		break;
     13e:	92 c0       	rjmp	.+292    	; 0x264 <ADC_u16GetAdcResult+0x162>
		case ADC_ADC1:
		SET_BIT  (ADMUX_REGISTER,ADC_MUX0_BIT);
     140:	87 b1       	in	r24, 0x07	; 7
     142:	81 60       	ori	r24, 0x01	; 1
     144:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX1_BIT);
     146:	87 b1       	in	r24, 0x07	; 7
     148:	8d 7f       	andi	r24, 0xFD	; 253
     14a:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX2_BIT);
     14c:	87 b1       	in	r24, 0x07	; 7
     14e:	8b 7f       	andi	r24, 0xFB	; 251
     150:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
     152:	87 b1       	in	r24, 0x07	; 7
     154:	87 7f       	andi	r24, 0xF7	; 247
     156:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
     158:	87 b1       	in	r24, 0x07	; 7
     15a:	8f 7e       	andi	r24, 0xEF	; 239
     15c:	87 b9       	out	0x07, r24	; 7
		DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN1,DIO_INPUT);
     15e:	40 e0       	ldi	r20, 0x00	; 0
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
		break;
     168:	7d c0       	rjmp	.+250    	; 0x264 <ADC_u16GetAdcResult+0x162>
		case ADC_ADC2:
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX0_BIT);
     16a:	87 b1       	in	r24, 0x07	; 7
     16c:	8e 7f       	andi	r24, 0xFE	; 254
     16e:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX1_BIT);
     170:	87 b1       	in	r24, 0x07	; 7
     172:	82 60       	ori	r24, 0x02	; 2
     174:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX2_BIT);
     176:	87 b1       	in	r24, 0x07	; 7
     178:	8b 7f       	andi	r24, 0xFB	; 251
     17a:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
     17c:	87 b1       	in	r24, 0x07	; 7
     17e:	87 7f       	andi	r24, 0xF7	; 247
     180:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
     182:	87 b1       	in	r24, 0x07	; 7
     184:	8f 7e       	andi	r24, 0xEF	; 239
     186:	87 b9       	out	0x07, r24	; 7
		DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN2,DIO_INPUT);
     188:	40 e0       	ldi	r20, 0x00	; 0
     18a:	62 e0       	ldi	r22, 0x02	; 2
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
		break;
     192:	68 c0       	rjmp	.+208    	; 0x264 <ADC_u16GetAdcResult+0x162>
		case ADC_ADC3:
		SET_BIT  (ADMUX_REGISTER,ADC_MUX0_BIT);
     194:	87 b1       	in	r24, 0x07	; 7
     196:	81 60       	ori	r24, 0x01	; 1
     198:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX1_BIT);
     19a:	87 b1       	in	r24, 0x07	; 7
     19c:	82 60       	ori	r24, 0x02	; 2
     19e:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX2_BIT);
     1a0:	87 b1       	in	r24, 0x07	; 7
     1a2:	8b 7f       	andi	r24, 0xFB	; 251
     1a4:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
     1a6:	87 b1       	in	r24, 0x07	; 7
     1a8:	87 7f       	andi	r24, 0xF7	; 247
     1aa:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
     1ac:	87 b1       	in	r24, 0x07	; 7
     1ae:	8f 7e       	andi	r24, 0xEF	; 239
     1b0:	87 b9       	out	0x07, r24	; 7
		DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN3,DIO_INPUT);
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	63 e0       	ldi	r22, 0x03	; 3
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
		break;
     1bc:	53 c0       	rjmp	.+166    	; 0x264 <ADC_u16GetAdcResult+0x162>
		case ADC_ADC4:
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX0_BIT);
     1be:	87 b1       	in	r24, 0x07	; 7
     1c0:	8e 7f       	andi	r24, 0xFE	; 254
     1c2:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX1_BIT);
     1c4:	87 b1       	in	r24, 0x07	; 7
     1c6:	8d 7f       	andi	r24, 0xFD	; 253
     1c8:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX2_BIT);
     1ca:	87 b1       	in	r24, 0x07	; 7
     1cc:	84 60       	ori	r24, 0x04	; 4
     1ce:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
     1d0:	87 b1       	in	r24, 0x07	; 7
     1d2:	87 7f       	andi	r24, 0xF7	; 247
     1d4:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
     1d6:	87 b1       	in	r24, 0x07	; 7
     1d8:	8f 7e       	andi	r24, 0xEF	; 239
     1da:	87 b9       	out	0x07, r24	; 7
		DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN4,DIO_INPUT);
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	64 e0       	ldi	r22, 0x04	; 4
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
		break;
     1e6:	3e c0       	rjmp	.+124    	; 0x264 <ADC_u16GetAdcResult+0x162>
		case ADC_ADC5:
		SET_BIT  (ADMUX_REGISTER,ADC_MUX0_BIT);
     1e8:	87 b1       	in	r24, 0x07	; 7
     1ea:	81 60       	ori	r24, 0x01	; 1
     1ec:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX1_BIT);
     1ee:	87 b1       	in	r24, 0x07	; 7
     1f0:	8d 7f       	andi	r24, 0xFD	; 253
     1f2:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX2_BIT);
     1f4:	87 b1       	in	r24, 0x07	; 7
     1f6:	84 60       	ori	r24, 0x04	; 4
     1f8:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
     1fa:	87 b1       	in	r24, 0x07	; 7
     1fc:	87 7f       	andi	r24, 0xF7	; 247
     1fe:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
     200:	87 b1       	in	r24, 0x07	; 7
     202:	8f 7e       	andi	r24, 0xEF	; 239
     204:	87 b9       	out	0x07, r24	; 7
		DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN5,DIO_INPUT);
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	65 e0       	ldi	r22, 0x05	; 5
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
		break;
     210:	29 c0       	rjmp	.+82     	; 0x264 <ADC_u16GetAdcResult+0x162>
		case ADC_ADC6:
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX0_BIT);
     212:	87 b1       	in	r24, 0x07	; 7
     214:	8e 7f       	andi	r24, 0xFE	; 254
     216:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX1_BIT);
     218:	87 b1       	in	r24, 0x07	; 7
     21a:	82 60       	ori	r24, 0x02	; 2
     21c:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX2_BIT);
     21e:	87 b1       	in	r24, 0x07	; 7
     220:	84 60       	ori	r24, 0x04	; 4
     222:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
     224:	87 b1       	in	r24, 0x07	; 7
     226:	87 7f       	andi	r24, 0xF7	; 247
     228:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
     22a:	87 b1       	in	r24, 0x07	; 7
     22c:	8f 7e       	andi	r24, 0xEF	; 239
     22e:	87 b9       	out	0x07, r24	; 7
		DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN6,DIO_INPUT);
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	66 e0       	ldi	r22, 0x06	; 6
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
		break;
     23a:	14 c0       	rjmp	.+40     	; 0x264 <ADC_u16GetAdcResult+0x162>
		case ADC_ADC7:
		SET_BIT  (ADMUX_REGISTER,ADC_MUX0_BIT);
     23c:	87 b1       	in	r24, 0x07	; 7
     23e:	81 60       	ori	r24, 0x01	; 1
     240:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX1_BIT);
     242:	87 b1       	in	r24, 0x07	; 7
     244:	82 60       	ori	r24, 0x02	; 2
     246:	87 b9       	out	0x07, r24	; 7
		SET_BIT  (ADMUX_REGISTER,ADC_MUX2_BIT);
     248:	87 b1       	in	r24, 0x07	; 7
     24a:	84 60       	ori	r24, 0x04	; 4
     24c:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX3_BIT);
     24e:	87 b1       	in	r24, 0x07	; 7
     250:	87 7f       	andi	r24, 0xF7	; 247
     252:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX_REGISTER,ADC_MUX4_BIT);
     254:	87 b1       	in	r24, 0x07	; 7
     256:	8f 7e       	andi	r24, 0xEF	; 239
     258:	87 b9       	out	0x07, r24	; 7
		DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN7,DIO_INPUT);
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	67 e0       	ldi	r22, 0x07	; 7
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
		break;
	}
	//start conversion
	SET_BIT(ADCSRA_REGISTER,ADC_ADSC_BIT);
     264:	86 b1       	in	r24, 0x06	; 6
     266:	80 64       	ori	r24, 0x40	; 64
     268:	86 b9       	out	0x06, r24	; 6
	
	//busy wait for the conversion to be done
	while(GET_BIT(ADCSRA_REGISTER,ADC_ADIF_BIT) == 0);
     26a:	34 9b       	sbis	0x06, 4	; 6
     26c:	fe cf       	rjmp	.-4      	; 0x26a <ADC_u16GetAdcResult+0x168>
	
	//clearing the flag manually
	SET_BIT(ADCSRA_REGISTER,ADC_ADIF_BIT);
     26e:	86 b1       	in	r24, 0x06	; 6
     270:	80 61       	ori	r24, 0x10	; 16
     272:	86 b9       	out	0x06, r24	; 6
	
	//returning result
	return (u16)ADC_DATA_REGISTER;
     274:	84 b1       	in	r24, 0x04	; 4
     276:	95 b1       	in	r25, 0x05	; 5
}
     278:	08 95       	ret

0000027a <DIO_voidSetPinDirection>:
		break;
		case DIO_PORTC:
		TOGGLE_BIT(PORTC_REGISTER,copy_u8PinId);
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD_REGISTER,copy_u8PinId);
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	01 f1       	breq	.+64     	; 0x2be <DIO_voidSetPinDirection+0x44>
     27e:	30 f0       	brcs	.+12     	; 0x28c <DIO_voidSetPinDirection+0x12>
     280:	82 30       	cpi	r24, 0x02	; 2
     282:	b1 f1       	breq	.+108    	; 0x2f0 <DIO_voidSetPinDirection+0x76>
     284:	83 30       	cpi	r24, 0x03	; 3
     286:	09 f4       	brne	.+2      	; 0x28a <DIO_voidSetPinDirection+0x10>
     288:	4c c0       	rjmp	.+152    	; 0x322 <DIO_voidSetPinDirection+0xa8>
     28a:	08 95       	ret
     28c:	41 30       	cpi	r20, 0x01	; 1
     28e:	59 f4       	brne	.+22     	; 0x2a6 <DIO_voidSetPinDirection+0x2c>
     290:	2a b3       	in	r18, 0x1a	; 26
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_voidSetPinDirection+0x22>
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	6a 95       	dec	r22
     29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_voidSetPinDirection+0x1e>
     2a0:	82 2b       	or	r24, r18
     2a2:	8a bb       	out	0x1a, r24	; 26
     2a4:	08 95       	ret
     2a6:	2a b3       	in	r18, 0x1a	; 26
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_voidSetPinDirection+0x38>
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	6a 95       	dec	r22
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_voidSetPinDirection+0x34>
     2b6:	80 95       	com	r24
     2b8:	82 23       	and	r24, r18
     2ba:	8a bb       	out	0x1a, r24	; 26
     2bc:	08 95       	ret
     2be:	41 30       	cpi	r20, 0x01	; 1
     2c0:	59 f4       	brne	.+22     	; 0x2d8 <DIO_voidSetPinDirection+0x5e>
     2c2:	27 b3       	in	r18, 0x17	; 23
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_voidSetPinDirection+0x54>
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	6a 95       	dec	r22
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_voidSetPinDirection+0x50>
     2d2:	82 2b       	or	r24, r18
     2d4:	87 bb       	out	0x17, r24	; 23
     2d6:	08 95       	ret
     2d8:	27 b3       	in	r18, 0x17	; 23
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_voidSetPinDirection+0x6a>
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	6a 95       	dec	r22
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_voidSetPinDirection+0x66>
     2e8:	80 95       	com	r24
     2ea:	82 23       	and	r24, r18
     2ec:	87 bb       	out	0x17, r24	; 23
     2ee:	08 95       	ret
     2f0:	41 30       	cpi	r20, 0x01	; 1
     2f2:	59 f4       	brne	.+22     	; 0x30a <DIO_voidSetPinDirection+0x90>
     2f4:	24 b3       	in	r18, 0x14	; 20
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_voidSetPinDirection+0x86>
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	6a 95       	dec	r22
     302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_voidSetPinDirection+0x82>
     304:	82 2b       	or	r24, r18
     306:	84 bb       	out	0x14, r24	; 20
     308:	08 95       	ret
     30a:	24 b3       	in	r18, 0x14	; 20
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_voidSetPinDirection+0x9c>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_voidSetPinDirection+0x98>
     31a:	80 95       	com	r24
     31c:	82 23       	and	r24, r18
     31e:	84 bb       	out	0x14, r24	; 20
     320:	08 95       	ret
     322:	41 30       	cpi	r20, 0x01	; 1
     324:	59 f4       	brne	.+22     	; 0x33c <DIO_voidSetPinDirection+0xc2>
     326:	21 b3       	in	r18, 0x11	; 17
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_voidSetPinDirection+0xb8>
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	6a 95       	dec	r22
     334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_voidSetPinDirection+0xb4>
     336:	82 2b       	or	r24, r18
     338:	81 bb       	out	0x11, r24	; 17
     33a:	08 95       	ret
     33c:	21 b3       	in	r18, 0x11	; 17
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_voidSetPinDirection+0xce>
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	6a 95       	dec	r22
     34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_voidSetPinDirection+0xca>
     34c:	80 95       	com	r24
     34e:	82 23       	and	r24, r18
     350:	81 bb       	out	0x11, r24	; 17
     352:	08 95       	ret

00000354 <DIO_voidSetPinValue>:
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	01 f1       	breq	.+64     	; 0x398 <DIO_voidSetPinValue+0x44>
     358:	30 f0       	brcs	.+12     	; 0x366 <DIO_voidSetPinValue+0x12>
     35a:	82 30       	cpi	r24, 0x02	; 2
     35c:	b1 f1       	breq	.+108    	; 0x3ca <DIO_voidSetPinValue+0x76>
     35e:	83 30       	cpi	r24, 0x03	; 3
     360:	09 f4       	brne	.+2      	; 0x364 <DIO_voidSetPinValue+0x10>
     362:	4c c0       	rjmp	.+152    	; 0x3fc <DIO_voidSetPinValue+0xa8>
     364:	08 95       	ret
     366:	41 30       	cpi	r20, 0x01	; 1
     368:	59 f4       	brne	.+22     	; 0x380 <DIO_voidSetPinValue+0x2c>
     36a:	2b b3       	in	r18, 0x1b	; 27
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_voidSetPinValue+0x22>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	6a 95       	dec	r22
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_voidSetPinValue+0x1e>
     37a:	82 2b       	or	r24, r18
     37c:	8b bb       	out	0x1b, r24	; 27
     37e:	08 95       	ret
     380:	2b b3       	in	r18, 0x1b	; 27
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_voidSetPinValue+0x38>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	6a 95       	dec	r22
     38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_voidSetPinValue+0x34>
     390:	80 95       	com	r24
     392:	82 23       	and	r24, r18
     394:	8b bb       	out	0x1b, r24	; 27
     396:	08 95       	ret
     398:	41 30       	cpi	r20, 0x01	; 1
     39a:	59 f4       	brne	.+22     	; 0x3b2 <DIO_voidSetPinValue+0x5e>
     39c:	28 b3       	in	r18, 0x18	; 24
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_voidSetPinValue+0x54>
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	6a 95       	dec	r22
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_voidSetPinValue+0x50>
     3ac:	82 2b       	or	r24, r18
     3ae:	88 bb       	out	0x18, r24	; 24
     3b0:	08 95       	ret
     3b2:	28 b3       	in	r18, 0x18	; 24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_voidSetPinValue+0x6a>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	6a 95       	dec	r22
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_voidSetPinValue+0x66>
     3c2:	80 95       	com	r24
     3c4:	82 23       	and	r24, r18
     3c6:	88 bb       	out	0x18, r24	; 24
     3c8:	08 95       	ret
     3ca:	41 30       	cpi	r20, 0x01	; 1
     3cc:	59 f4       	brne	.+22     	; 0x3e4 <DIO_voidSetPinValue+0x90>
     3ce:	25 b3       	in	r18, 0x15	; 21
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_voidSetPinValue+0x86>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	6a 95       	dec	r22
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_voidSetPinValue+0x82>
     3de:	82 2b       	or	r24, r18
     3e0:	85 bb       	out	0x15, r24	; 21
     3e2:	08 95       	ret
     3e4:	25 b3       	in	r18, 0x15	; 21
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_voidSetPinValue+0x9c>
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	6a 95       	dec	r22
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_voidSetPinValue+0x98>
     3f4:	80 95       	com	r24
     3f6:	82 23       	and	r24, r18
     3f8:	85 bb       	out	0x15, r24	; 21
     3fa:	08 95       	ret
     3fc:	41 30       	cpi	r20, 0x01	; 1
     3fe:	59 f4       	brne	.+22     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     400:	22 b3       	in	r18, 0x12	; 18
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	6a 95       	dec	r22
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     410:	82 2b       	or	r24, r18
     412:	82 bb       	out	0x12, r24	; 18
     414:	08 95       	ret
     416:	22 b3       	in	r18, 0x12	; 18
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	6a 95       	dec	r22
     424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     426:	80 95       	com	r24
     428:	82 23       	and	r24, r18
     42a:	82 bb       	out	0x12, r24	; 18
     42c:	08 95       	ret

0000042e <DIO_voidGetPinValue>:
		break;
	}
}
void DIO_voidGetPinValue(u8 copy_u8PortId,u8 copy_u8PinId,u8* copy_pu8InputValue){
	switch(copy_u8PortId){
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	89 f0       	breq	.+34     	; 0x454 <DIO_voidGetPinValue+0x26>
     432:	28 f0       	brcs	.+10     	; 0x43e <DIO_voidGetPinValue+0x10>
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	c9 f0       	breq	.+50     	; 0x46a <DIO_voidGetPinValue+0x3c>
     438:	83 30       	cpi	r24, 0x03	; 3
     43a:	11 f1       	breq	.+68     	; 0x480 <DIO_voidGetPinValue+0x52>
     43c:	08 95       	ret
		case DIO_PORTA:
		*copy_pu8InputValue = GET_BIT(PINA_REGISTER,copy_u8PinId);
     43e:	89 b3       	in	r24, 0x19	; 25
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_voidGetPinValue+0x1a>
     444:	95 95       	asr	r25
     446:	87 95       	ror	r24
     448:	6a 95       	dec	r22
     44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_voidGetPinValue+0x16>
     44c:	81 70       	andi	r24, 0x01	; 1
     44e:	fa 01       	movw	r30, r20
     450:	80 83       	st	Z, r24
		break;
     452:	08 95       	ret
		case DIO_PORTB:
		*copy_pu8InputValue = GET_BIT(PINB_REGISTER,copy_u8PinId);
     454:	86 b3       	in	r24, 0x16	; 22
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_voidGetPinValue+0x30>
     45a:	95 95       	asr	r25
     45c:	87 95       	ror	r24
     45e:	6a 95       	dec	r22
     460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_voidGetPinValue+0x2c>
     462:	81 70       	andi	r24, 0x01	; 1
     464:	fa 01       	movw	r30, r20
     466:	80 83       	st	Z, r24
		break;
     468:	08 95       	ret
		case DIO_PORTC:
		*copy_pu8InputValue = GET_BIT(PINC_REGISTER,copy_u8PinId);
     46a:	83 b3       	in	r24, 0x13	; 19
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_voidGetPinValue+0x46>
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	6a 95       	dec	r22
     476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_voidGetPinValue+0x42>
     478:	81 70       	andi	r24, 0x01	; 1
     47a:	fa 01       	movw	r30, r20
     47c:	80 83       	st	Z, r24
		break;
     47e:	08 95       	ret
		case DIO_PORTD:
		*copy_pu8InputValue = GET_BIT(PIND_REGISTER,copy_u8PinId);
     480:	80 b3       	in	r24, 0x10	; 16
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_voidGetPinValue+0x5c>
     486:	95 95       	asr	r25
     488:	87 95       	ror	r24
     48a:	6a 95       	dec	r22
     48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_voidGetPinValue+0x58>
     48e:	81 70       	andi	r24, 0x01	; 1
     490:	fa 01       	movw	r30, r20
     492:	80 83       	st	Z, r24
     494:	08 95       	ret

00000496 <EEPROM_voidInit>:
#include "i2c_interface.h"
#include "eeprom_interface.h"
#include "eeprom_private.h"

void EEPROM_voidInit(void){
	I2C_voidMasterInit();
     496:	0e 94 03 03 	call	0x606	; 0x606 <I2C_voidMasterInit>
     49a:	08 95       	ret

0000049c <EEPROM_voidWriteByte>:
}

void EEPROM_voidWriteByte(u16 copy_u16WordAddress,u8 copy_u8Data){
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	d8 2f       	mov	r29, r24
     4a4:	c6 2f       	mov	r28, r22
	u8 local_u8DeviceAddress = EEPROM_FIXED_ADDRESS;
	local_u8DeviceAddress |= (copy_u16WordAddress >> 8);
     4a6:	19 2f       	mov	r17, r25
     4a8:	10 65       	ori	r17, 0x50	; 80
	
	//send start condition
	I2C_voidSendStartCondition();
     4aa:	0e 94 12 03 	call	0x624	; 0x624 <I2C_voidSendStartCondition>
	
	//send device address with write
	I2C_voidSendSlaveAddressWithWrite(local_u8DeviceAddress);
     4ae:	81 2f       	mov	r24, r17
     4b0:	0e 94 35 03 	call	0x66a	; 0x66a <I2C_voidSendSlaveAddressWithWrite>
	
	//send word address
	I2C_voidMasterSendDataByte((u8)copy_u16WordAddress);
     4b4:	8d 2f       	mov	r24, r29
     4b6:	0e 94 5f 03 	call	0x6be	; 0x6be <I2C_voidMasterSendDataByte>
	
	//send data byte
	I2C_voidMasterSendDataByte(copy_u8Data);
     4ba:	8c 2f       	mov	r24, r28
     4bc:	0e 94 5f 03 	call	0x6be	; 0x6be <I2C_voidMasterSendDataByte>
	
	//send stop condition
	I2C_voidSendStopCondition();
     4c0:	0e 94 2e 03 	call	0x65c	; 0x65c <I2C_voidSendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c4:	8f e1       	ldi	r24, 0x1F	; 31
     4c6:	9e e4       	ldi	r25, 0x4E	; 78
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <EEPROM_voidWriteByte+0x2c>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <EEPROM_voidWriteByte+0x32>
     4ce:	00 00       	nop
	
	//self timed write cycle delay
	_delay_ms(5);
}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	08 95       	ret

000004d8 <EEPROM_voidReadByte>:

void EEPROM_voidReadByte (u16 copy_u16WordAddress,u8* copy_pu8Data){
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	d8 2f       	mov	r29, r24
     4e2:	8b 01       	movw	r16, r22
	u8 local_u8DeviceAddress = EEPROM_FIXED_ADDRESS;
	local_u8DeviceAddress |= (copy_u16WordAddress >> 8);
     4e4:	c9 2f       	mov	r28, r25
     4e6:	c0 65       	ori	r28, 0x50	; 80
	
	//send start condition
	I2C_voidSendStartCondition();
     4e8:	0e 94 12 03 	call	0x624	; 0x624 <I2C_voidSendStartCondition>
	
	//send device address with write
	I2C_voidSendSlaveAddressWithWrite(local_u8DeviceAddress);
     4ec:	8c 2f       	mov	r24, r28
     4ee:	0e 94 35 03 	call	0x66a	; 0x66a <I2C_voidSendSlaveAddressWithWrite>
	
	//send word address
	I2C_voidMasterSendDataByte((u8)copy_u16WordAddress);
     4f2:	8d 2f       	mov	r24, r29
     4f4:	0e 94 5f 03 	call	0x6be	; 0x6be <I2C_voidMasterSendDataByte>
	
	//send repeated start condition
	I2C_voidSendRepeatedStartCondition();
     4f8:	0e 94 20 03 	call	0x640	; 0x640 <I2C_voidSendRepeatedStartCondition>
	
	//send device address with read
	I2C_voidSendSlaveAddressWithRead(local_u8DeviceAddress);
     4fc:	8c 2f       	mov	r24, r28
     4fe:	0e 94 4a 03 	call	0x694	; 0x694 <I2C_voidSendSlaveAddressWithRead>
	
	//read data byte with NACK
	I2C_voidMasterReceiveDataByteWithoutACK(copy_pu8Data);
     502:	c8 01       	movw	r24, r16
     504:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <I2C_voidMasterReceiveDataByteWithoutACK>
	
	//send stop condition
	I2C_voidSendStopCondition();
     508:	0e 94 2e 03 	call	0x65c	; 0x65c <I2C_voidSendStopCondition>
     50c:	8f e1       	ldi	r24, 0x1F	; 31
     50e:	9e e4       	ldi	r25, 0x4E	; 78
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <EEPROM_voidReadByte+0x38>
     514:	00 c0       	rjmp	.+0      	; 0x516 <EEPROM_voidReadByte+0x3e>
     516:	00 00       	nop
	
	//self timed write cycle delay
	_delay_ms(5);
}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <EXTI_voidExternalInterruptInit>:
#include "DIO_interface.h"
#include "EXTI_interface.h"
#include "EXTI_registers.h"

void EXTI_voidExternalInterruptInit(u8 copy_u8ExtiId,u8 copy_u8SenseContolType){
	switch(copy_u8ExtiId){
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	49 f1       	breq	.+82     	; 0x578 <EXTI_voidExternalInterruptInit+0x56>
     526:	20 f0       	brcs	.+8      	; 0x530 <EXTI_voidExternalInterruptInit+0xe>
     528:	82 30       	cpi	r24, 0x02	; 2
     52a:	09 f4       	brne	.+2      	; 0x52e <EXTI_voidExternalInterruptInit+0xc>
     52c:	49 c0       	rjmp	.+146    	; 0x5c0 <EXTI_voidExternalInterruptInit+0x9e>
     52e:	08 95       	ret
		
		case EXTI_EXTI0:
		switch(copy_u8SenseContolType){
     530:	61 30       	cpi	r22, 0x01	; 1
     532:	69 f0       	breq	.+26     	; 0x54e <EXTI_voidExternalInterruptInit+0x2c>
     534:	28 f0       	brcs	.+10     	; 0x540 <EXTI_voidExternalInterruptInit+0x1e>
     536:	62 30       	cpi	r22, 0x02	; 2
     538:	89 f0       	breq	.+34     	; 0x55c <EXTI_voidExternalInterruptInit+0x3a>
     53a:	63 30       	cpi	r22, 0x03	; 3
     53c:	b1 f0       	breq	.+44     	; 0x56a <EXTI_voidExternalInterruptInit+0x48>
     53e:	08 95       	ret
			case EXTI_LOW_LEVEL:
			CLEAR_BIT(MCUCR_REGISTER,EXTI_ISC00_BIT);
     540:	85 b7       	in	r24, 0x35	; 53
     542:	8e 7f       	andi	r24, 0xFE	; 254
     544:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR_REGISTER,EXTI_ISC01_BIT);
     546:	85 b7       	in	r24, 0x35	; 53
     548:	8d 7f       	andi	r24, 0xFD	; 253
     54a:	85 bf       	out	0x35, r24	; 53
			break;
     54c:	08 95       	ret
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT  (MCUCR_REGISTER,EXTI_ISC00_BIT);
     54e:	85 b7       	in	r24, 0x35	; 53
     550:	81 60       	ori	r24, 0x01	; 1
     552:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR_REGISTER,EXTI_ISC01_BIT);
     554:	85 b7       	in	r24, 0x35	; 53
     556:	8d 7f       	andi	r24, 0xFD	; 253
     558:	85 bf       	out	0x35, r24	; 53
			break;
     55a:	08 95       	ret
			case EXTI_FALLING_EDGE:
			CLEAR_BIT(MCUCR_REGISTER,EXTI_ISC00_BIT);
     55c:	85 b7       	in	r24, 0x35	; 53
     55e:	8e 7f       	andi	r24, 0xFE	; 254
     560:	85 bf       	out	0x35, r24	; 53
			SET_BIT  (MCUCR_REGISTER,EXTI_ISC01_BIT);
     562:	85 b7       	in	r24, 0x35	; 53
     564:	82 60       	ori	r24, 0x02	; 2
     566:	85 bf       	out	0x35, r24	; 53
			break;
     568:	08 95       	ret
			case EXTI_RISING_EDGE:
			SET_BIT  (MCUCR_REGISTER,EXTI_ISC00_BIT);
     56a:	85 b7       	in	r24, 0x35	; 53
     56c:	81 60       	ori	r24, 0x01	; 1
     56e:	85 bf       	out	0x35, r24	; 53
			SET_BIT  (MCUCR_REGISTER,EXTI_ISC01_BIT);
     570:	85 b7       	in	r24, 0x35	; 53
     572:	82 60       	ori	r24, 0x02	; 2
     574:	85 bf       	out	0x35, r24	; 53
			break;
     576:	08 95       	ret
		}
		break;
		
		case EXTI_EXTI1:
		switch(copy_u8SenseContolType){
     578:	61 30       	cpi	r22, 0x01	; 1
     57a:	69 f0       	breq	.+26     	; 0x596 <EXTI_voidExternalInterruptInit+0x74>
     57c:	28 f0       	brcs	.+10     	; 0x588 <EXTI_voidExternalInterruptInit+0x66>
     57e:	62 30       	cpi	r22, 0x02	; 2
     580:	89 f0       	breq	.+34     	; 0x5a4 <EXTI_voidExternalInterruptInit+0x82>
     582:	63 30       	cpi	r22, 0x03	; 3
     584:	b1 f0       	breq	.+44     	; 0x5b2 <EXTI_voidExternalInterruptInit+0x90>
     586:	08 95       	ret
			case EXTI_LOW_LEVEL:
			CLEAR_BIT(MCUCR_REGISTER,EXTI_ISC10_BIT);
     588:	85 b7       	in	r24, 0x35	; 53
     58a:	8b 7f       	andi	r24, 0xFB	; 251
     58c:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR_REGISTER,EXTI_ISC11_BIT);
     58e:	85 b7       	in	r24, 0x35	; 53
     590:	87 7f       	andi	r24, 0xF7	; 247
     592:	85 bf       	out	0x35, r24	; 53
			break;
     594:	08 95       	ret
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT  (MCUCR_REGISTER,EXTI_ISC10_BIT);
     596:	85 b7       	in	r24, 0x35	; 53
     598:	84 60       	ori	r24, 0x04	; 4
     59a:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR_REGISTER,EXTI_ISC11_BIT);
     59c:	85 b7       	in	r24, 0x35	; 53
     59e:	87 7f       	andi	r24, 0xF7	; 247
     5a0:	85 bf       	out	0x35, r24	; 53
			break;
     5a2:	08 95       	ret
			case EXTI_FALLING_EDGE:
			CLEAR_BIT(MCUCR_REGISTER,EXTI_ISC10_BIT);
     5a4:	85 b7       	in	r24, 0x35	; 53
     5a6:	8b 7f       	andi	r24, 0xFB	; 251
     5a8:	85 bf       	out	0x35, r24	; 53
			SET_BIT  (MCUCR_REGISTER,EXTI_ISC11_BIT);
     5aa:	85 b7       	in	r24, 0x35	; 53
     5ac:	88 60       	ori	r24, 0x08	; 8
     5ae:	85 bf       	out	0x35, r24	; 53
			break;
     5b0:	08 95       	ret
			case EXTI_RISING_EDGE:
			SET_BIT  (MCUCR_REGISTER,EXTI_ISC10_BIT);
     5b2:	85 b7       	in	r24, 0x35	; 53
     5b4:	84 60       	ori	r24, 0x04	; 4
     5b6:	85 bf       	out	0x35, r24	; 53
			SET_BIT  (MCUCR_REGISTER,EXTI_ISC11_BIT);
     5b8:	85 b7       	in	r24, 0x35	; 53
     5ba:	88 60       	ori	r24, 0x08	; 8
     5bc:	85 bf       	out	0x35, r24	; 53
			break;
     5be:	08 95       	ret
		}
		break;
		
		case EXTI_EXTI2:
		switch(copy_u8SenseContolType){
     5c0:	62 30       	cpi	r22, 0x02	; 2
     5c2:	19 f0       	breq	.+6      	; 0x5ca <EXTI_voidExternalInterruptInit+0xa8>
     5c4:	63 30       	cpi	r22, 0x03	; 3
     5c6:	29 f0       	breq	.+10     	; 0x5d2 <EXTI_voidExternalInterruptInit+0xb0>
     5c8:	08 95       	ret
			case EXTI_FALLING_EDGE:
			CLEAR_BIT(MCUCSR_REGISTER,EXTI_ISC2_BIT);
     5ca:	84 b7       	in	r24, 0x34	; 52
     5cc:	8f 7b       	andi	r24, 0xBF	; 191
     5ce:	84 bf       	out	0x34, r24	; 52
			break;
     5d0:	08 95       	ret
			case EXTI_RISING_EDGE:
			SET_BIT  (MCUCSR_REGISTER,EXTI_ISC2_BIT);
     5d2:	84 b7       	in	r24, 0x34	; 52
     5d4:	80 64       	ori	r24, 0x40	; 64
     5d6:	84 bf       	out	0x34, r24	; 52
     5d8:	08 95       	ret

000005da <EXTI_voidExternalInterruptEnable>:
		}
		break;
	}
}
void EXTI_voidExternalInterruptEnable(u8 copy_u8ExtiId){
	switch(copy_u8ExtiId){
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	41 f0       	breq	.+16     	; 0x5ee <EXTI_voidExternalInterruptEnable+0x14>
     5de:	18 f0       	brcs	.+6      	; 0x5e6 <EXTI_voidExternalInterruptEnable+0xc>
     5e0:	82 30       	cpi	r24, 0x02	; 2
     5e2:	49 f0       	breq	.+18     	; 0x5f6 <EXTI_voidExternalInterruptEnable+0x1c>
     5e4:	08 95       	ret
		case EXTI_EXTI0:
		SET_BIT(GICR_REGISTER,EXTI_INT0_BIT);
     5e6:	8b b7       	in	r24, 0x3b	; 59
     5e8:	80 64       	ori	r24, 0x40	; 64
     5ea:	8b bf       	out	0x3b, r24	; 59
		break;
     5ec:	08 95       	ret
		case EXTI_EXTI1:
		SET_BIT(GICR_REGISTER,EXTI_INT1_BIT);
     5ee:	8b b7       	in	r24, 0x3b	; 59
     5f0:	80 68       	ori	r24, 0x80	; 128
     5f2:	8b bf       	out	0x3b, r24	; 59
		break;
     5f4:	08 95       	ret
		case EXTI_EXTI2:
		SET_BIT(GICR_REGISTER,EXTI_INT2_BIT);
     5f6:	8b b7       	in	r24, 0x3b	; 59
     5f8:	80 62       	ori	r24, 0x20	; 32
     5fa:	8b bf       	out	0x3b, r24	; 59
     5fc:	08 95       	ret

000005fe <GI_voidEnableGeneralInterrupt>:
#include "GI_interface.h"
#include "GI_registers.h"


void GI_voidEnableGeneralInterrupt (void){
	SET_BIT(SREG_REGISTER,GI_I_BIT);
     5fe:	8f b7       	in	r24, 0x3f	; 63
     600:	80 68       	ori	r24, 0x80	; 128
     602:	8f bf       	out	0x3f, r24	; 63
     604:	08 95       	ret

00000606 <I2C_voidMasterInit>:

	//get the data from the data register
	*copy_pu8Data = TWDR_REG;

	//disable ACK pulse generation
	CLEAR_BIT  (TWCR_REG,TWEA_BIT);
     606:	81 b1       	in	r24, 0x01	; 1
     608:	8d 7f       	andi	r24, 0xFD	; 253
     60a:	81 b9       	out	0x01, r24	; 1
     60c:	81 b1       	in	r24, 0x01	; 1
     60e:	8e 7f       	andi	r24, 0xFE	; 254
     610:	81 b9       	out	0x01, r24	; 1
     612:	8c e0       	ldi	r24, 0x0C	; 12
     614:	80 b9       	out	0x00, r24	; 0
     616:	86 b7       	in	r24, 0x36	; 54
     618:	84 60       	ori	r24, 0x04	; 4
     61a:	86 bf       	out	0x36, r24	; 54
     61c:	86 b7       	in	r24, 0x36	; 54
     61e:	8e 7f       	andi	r24, 0xFE	; 254
     620:	86 bf       	out	0x36, r24	; 54
     622:	08 95       	ret

00000624 <I2C_voidSendStartCondition>:
     624:	86 b7       	in	r24, 0x36	; 54
     626:	80 62       	ori	r24, 0x20	; 32
     628:	86 bf       	out	0x36, r24	; 54
     62a:	86 b7       	in	r24, 0x36	; 54
     62c:	80 68       	ori	r24, 0x80	; 128
     62e:	86 bf       	out	0x36, r24	; 54
     630:	06 b6       	in	r0, 0x36	; 54
     632:	07 fe       	sbrs	r0, 7
     634:	fd cf       	rjmp	.-6      	; 0x630 <I2C_voidSendStartCondition+0xc>
     636:	81 b1       	in	r24, 0x01	; 1
     638:	88 7f       	andi	r24, 0xF8	; 248
     63a:	88 30       	cpi	r24, 0x08	; 8
     63c:	e1 f7       	brne	.-8      	; 0x636 <I2C_voidSendStartCondition+0x12>
     63e:	08 95       	ret

00000640 <I2C_voidSendRepeatedStartCondition>:
     640:	86 b7       	in	r24, 0x36	; 54
     642:	80 62       	ori	r24, 0x20	; 32
     644:	86 bf       	out	0x36, r24	; 54
     646:	86 b7       	in	r24, 0x36	; 54
     648:	80 68       	ori	r24, 0x80	; 128
     64a:	86 bf       	out	0x36, r24	; 54
     64c:	06 b6       	in	r0, 0x36	; 54
     64e:	07 fe       	sbrs	r0, 7
     650:	fd cf       	rjmp	.-6      	; 0x64c <I2C_voidSendRepeatedStartCondition+0xc>
     652:	81 b1       	in	r24, 0x01	; 1
     654:	88 7f       	andi	r24, 0xF8	; 248
     656:	80 31       	cpi	r24, 0x10	; 16
     658:	e1 f7       	brne	.-8      	; 0x652 <I2C_voidSendRepeatedStartCondition+0x12>
     65a:	08 95       	ret

0000065c <I2C_voidSendStopCondition>:
     65c:	86 b7       	in	r24, 0x36	; 54
     65e:	80 61       	ori	r24, 0x10	; 16
     660:	86 bf       	out	0x36, r24	; 54
     662:	86 b7       	in	r24, 0x36	; 54
     664:	80 68       	ori	r24, 0x80	; 128
     666:	86 bf       	out	0x36, r24	; 54
     668:	08 95       	ret

0000066a <I2C_voidSendSlaveAddressWithWrite>:
     66a:	88 23       	and	r24, r24
     66c:	94 f0       	brlt	.+36     	; 0x692 <I2C_voidSendSlaveAddressWithWrite+0x28>
     66e:	88 0f       	add	r24, r24
     670:	83 b9       	out	0x03, r24	; 3
     672:	83 b1       	in	r24, 0x03	; 3
     674:	8e 7f       	andi	r24, 0xFE	; 254
     676:	83 b9       	out	0x03, r24	; 3
     678:	86 b7       	in	r24, 0x36	; 54
     67a:	8f 7d       	andi	r24, 0xDF	; 223
     67c:	86 bf       	out	0x36, r24	; 54
     67e:	86 b7       	in	r24, 0x36	; 54
     680:	80 68       	ori	r24, 0x80	; 128
     682:	86 bf       	out	0x36, r24	; 54
     684:	06 b6       	in	r0, 0x36	; 54
     686:	07 fe       	sbrs	r0, 7
     688:	fd cf       	rjmp	.-6      	; 0x684 <I2C_voidSendSlaveAddressWithWrite+0x1a>
     68a:	81 b1       	in	r24, 0x01	; 1
     68c:	88 7f       	andi	r24, 0xF8	; 248
     68e:	88 31       	cpi	r24, 0x18	; 24
     690:	e1 f7       	brne	.-8      	; 0x68a <I2C_voidSendSlaveAddressWithWrite+0x20>
     692:	08 95       	ret

00000694 <I2C_voidSendSlaveAddressWithRead>:
     694:	88 23       	and	r24, r24
     696:	94 f0       	brlt	.+36     	; 0x6bc <I2C_voidSendSlaveAddressWithRead+0x28>
     698:	88 0f       	add	r24, r24
     69a:	83 b9       	out	0x03, r24	; 3
     69c:	83 b1       	in	r24, 0x03	; 3
     69e:	81 60       	ori	r24, 0x01	; 1
     6a0:	83 b9       	out	0x03, r24	; 3
     6a2:	86 b7       	in	r24, 0x36	; 54
     6a4:	8f 7d       	andi	r24, 0xDF	; 223
     6a6:	86 bf       	out	0x36, r24	; 54
     6a8:	86 b7       	in	r24, 0x36	; 54
     6aa:	80 68       	ori	r24, 0x80	; 128
     6ac:	86 bf       	out	0x36, r24	; 54
     6ae:	06 b6       	in	r0, 0x36	; 54
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <I2C_voidSendSlaveAddressWithRead+0x1a>
     6b4:	81 b1       	in	r24, 0x01	; 1
     6b6:	88 7f       	andi	r24, 0xF8	; 248
     6b8:	80 34       	cpi	r24, 0x40	; 64
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <I2C_voidSendSlaveAddressWithRead+0x20>
     6bc:	08 95       	ret

000006be <I2C_voidMasterSendDataByte>:
     6be:	83 b9       	out	0x03, r24	; 3
     6c0:	86 b7       	in	r24, 0x36	; 54
     6c2:	80 68       	ori	r24, 0x80	; 128
     6c4:	86 bf       	out	0x36, r24	; 54
     6c6:	06 b6       	in	r0, 0x36	; 54
     6c8:	07 fe       	sbrs	r0, 7
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <I2C_voidMasterSendDataByte+0x8>
     6cc:	81 b1       	in	r24, 0x01	; 1
     6ce:	88 7f       	andi	r24, 0xF8	; 248
     6d0:	88 32       	cpi	r24, 0x28	; 40
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <I2C_voidMasterSendDataByte+0xe>
     6d4:	08 95       	ret

000006d6 <I2C_voidMasterReceiveDataByteWithoutACK>:
}
void I2C_voidMasterReceiveDataByteWithoutACK(u8* copy_pu8Data){
     6d6:	fc 01       	movw	r30, r24
	//clearing TWI flag
	SET_BIT(TWCR_REG,TWINT_BIT);
     6d8:	96 b7       	in	r25, 0x36	; 54
     6da:	90 68       	ori	r25, 0x80	; 128
     6dc:	96 bf       	out	0x36, r25	; 54

	//waiting for the data to be received
	while(GET_BIT(TWCR_REG,TWINT_BIT) == 0);
     6de:	06 b6       	in	r0, 0x36	; 54
     6e0:	07 fe       	sbrs	r0, 7
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <I2C_voidMasterReceiveDataByteWithoutACK+0x8>

	//waiting for the right status code to be generated
	while(I2C_STATUS_CODE_VALUE != I2C_STATUS_CODE_BYTE_DATA_RECEIVED_WITHOUT_ACK);
     6e4:	91 b1       	in	r25, 0x01	; 1
     6e6:	98 7f       	andi	r25, 0xF8	; 248
     6e8:	98 35       	cpi	r25, 0x58	; 88
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <I2C_voidMasterReceiveDataByteWithoutACK+0xe>

	//get the data from the data register
	*copy_pu8Data = TWDR_REG;
     6ec:	83 b1       	in	r24, 0x03	; 3
     6ee:	80 83       	st	Z, r24
     6f0:	08 95       	ret

000006f2 <KEYPAD_voidInit>:
#include "keyPad_interface.h"
#include "keyPad_config.h"

void KEYPAD_voidInit(void){
	//initializing rows
	DIO_voidSetPinDirection(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN,DIO_INPUT);
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	64 e0       	ldi	r22, 0x04	; 4
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN,DIO_INPUT);
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	65 e0       	ldi	r22, 0x05	; 5
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN,DIO_INPUT);
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	66 e0       	ldi	r22, 0x06	; 6
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN,DIO_INPUT);
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	67 e0       	ldi	r22, 0x07	; 7
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	//activating internal pull-up resistor for rows
	DIO_voidSetPinValue(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN,DIO_HIGH);
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	64 e0       	ldi	r22, 0x04	; 4
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN,DIO_HIGH);
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	65 e0       	ldi	r22, 0x05	; 5
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN,DIO_HIGH);
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	66 e0       	ldi	r22, 0x06	; 6
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN,DIO_HIGH);
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	67 e0       	ldi	r22, 0x07	; 7
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
	//initializing columns
	DIO_voidSetPinDirection(KEYPAD_COLUMN0_PORT,KEYPAD_COLUMN0_PIN,DIO_OUTPUT);
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COLUMN1_PORT,KEYPAD_COLUMN1_PIN,DIO_OUTPUT);
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COLUMN2_PORT,KEYPAD_COLUMN2_PIN,DIO_OUTPUT);
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	63 e0       	ldi	r22, 0x03	; 3
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(KEYPAD_COLUMN0_PORT,KEYPAD_COLUMN0_PIN,DIO_HIGH);
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COLUMN1_PORT,KEYPAD_COLUMN1_PIN,DIO_HIGH);
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	62 e0       	ldi	r22, 0x02	; 2
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COLUMN2_PORT,KEYPAD_COLUMN2_PIN,DIO_HIGH);
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	63 e0       	ldi	r22, 0x03	; 3
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     77e:	08 95       	ret

00000780 <KEYPAD_voidGetPressedKey>:
}


void KEYPAD_voidGetPressedKey(u8* copy_pu8pressedKey){
     780:	6f 92       	push	r6
     782:	7f 92       	push	r7
     784:	8f 92       	push	r8
     786:	9f 92       	push	r9
     788:	af 92       	push	r10
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	6b 97       	sbiw	r28, 0x1b	; 27
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	5c 01       	movw	r10, r24
	//arrays for ports and pins to make iterations easier
	u8 local_u8ColumnPorts[] = {KEYPAD_COLUMN0_PORT,KEYPAD_COLUMN1_PORT,KEYPAD_COLUMN2_PORT};
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	89 83       	std	Y+1, r24	; 0x01
     7b2:	8a 83       	std	Y+2, r24	; 0x02
     7b4:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8ColumnPins [] = {KEYPAD_COLUMN0_PIN,KEYPAD_COLUMN1_PIN,KEYPAD_COLUMN2_PIN};
     7b6:	8c 83       	std	Y+4, r24	; 0x04
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	9d 83       	std	Y+5, r25	; 0x05
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	9e 83       	std	Y+6, r25	; 0x06
	u8 local_u8RowPorts   [] = {KEYPAD_ROW0_PORT,KEYPAD_ROW1_PORT,KEYPAD_ROW2_PORT,KEYPAD_ROW3_PORT};
     7c0:	8f 83       	std	Y+7, r24	; 0x07
     7c2:	88 87       	std	Y+8, r24	; 0x08
     7c4:	89 87       	std	Y+9, r24	; 0x09
     7c6:	8a 87       	std	Y+10, r24	; 0x0a
	u8 local_u8RowPins    [] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
     7c8:	84 e0       	ldi	r24, 0x04	; 4
     7ca:	8b 87       	std	Y+11, r24	; 0x0b
     7cc:	85 e0       	ldi	r24, 0x05	; 5
     7ce:	8c 87       	std	Y+12, r24	; 0x0c
     7d0:	86 e0       	ldi	r24, 0x06	; 6
     7d2:	8d 87       	std	Y+13, r24	; 0x0d
     7d4:	87 e0       	ldi	r24, 0x07	; 7
     7d6:	8e 87       	std	Y+14, r24	; 0x0e
	
	
	u8 local_u8KeypadKeys[4][3] = KEYPAD_KEYS;  
     7d8:	8c e0       	ldi	r24, 0x0C	; 12
     7da:	e0 e6       	ldi	r30, 0x60	; 96
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	de 01       	movw	r26, r28
     7e0:	1f 96       	adiw	r26, 0x0f	; 15
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	8a 95       	dec	r24
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <KEYPAD_voidGetPressedKey+0x62>
	u8 local_u8PinValue;
	for(u8 local_u8ColumnsCounter = 0;local_u8ColumnsCounter<3;++local_u8ColumnsCounter){
     7ea:	81 2c       	mov	r8, r1
     7ec:	57 c0       	rjmp	.+174    	; 0x89c <__stack+0x3d>
		DIO_voidSetPinValue(local_u8ColumnPorts[local_u8ColumnsCounter],local_u8ColumnPins[local_u8ColumnsCounter],DIO_LOW);
     7ee:	c8 2c       	mov	r12, r8
     7f0:	d1 2c       	mov	r13, r1
     7f2:	e4 e0       	ldi	r30, 0x04	; 4
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	ec 0f       	add	r30, r28
     7f8:	fd 1f       	adc	r31, r29
     7fa:	ec 0d       	add	r30, r12
     7fc:	fd 1d       	adc	r31, r13
     7fe:	60 80       	ld	r6, Z
     800:	e1 e0       	ldi	r30, 0x01	; 1
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	ec 0f       	add	r30, r28
     806:	fd 1f       	adc	r31, r29
     808:	ec 0d       	add	r30, r12
     80a:	fd 1d       	adc	r31, r13
     80c:	70 80       	ld	r7, Z
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	66 2d       	mov	r22, r6
     812:	87 2d       	mov	r24, r7
     814:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
		
		for(u8 local_u8RowsCounter = 0;local_u8RowsCounter<4;++local_u8RowsCounter){
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	38 c0       	rjmp	.+112    	; 0x88c <__stack+0x2d>
			DIO_voidGetPinValue(local_u8RowPorts[local_u8RowsCounter],local_u8RowPins[local_u8RowsCounter],&local_u8PinValue);
     81c:	e1 2e       	mov	r14, r17
     81e:	f1 2c       	mov	r15, r1
     820:	eb e0       	ldi	r30, 0x0B	; 11
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	ec 0f       	add	r30, r28
     826:	fd 1f       	adc	r31, r29
     828:	ee 0d       	add	r30, r14
     82a:	ff 1d       	adc	r31, r15
     82c:	00 81       	ld	r16, Z
     82e:	e7 e0       	ldi	r30, 0x07	; 7
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	ec 0f       	add	r30, r28
     834:	fd 1f       	adc	r31, r29
     836:	ee 0d       	add	r30, r14
     838:	ff 1d       	adc	r31, r15
     83a:	90 80       	ld	r9, Z
     83c:	ae 01       	movw	r20, r28
     83e:	45 5e       	subi	r20, 0xE5	; 229
     840:	5f 4f       	sbci	r21, 0xFF	; 255
     842:	60 2f       	mov	r22, r16
     844:	89 2d       	mov	r24, r9
     846:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_voidGetPinValue>
			//if a key is pressed
			if(local_u8PinValue == 0){
     84a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     84c:	81 11       	cpse	r24, r1
     84e:	1d c0       	rjmp	.+58     	; 0x88a <__stack+0x2b>
     850:	07 c0       	rjmp	.+14     	; 0x860 <__stack+0x1>
				//while key is holden 
				while(local_u8PinValue == 0){
					DIO_voidGetPinValue(local_u8RowPorts[local_u8RowsCounter],local_u8RowPins[local_u8RowsCounter],&local_u8PinValue);		
     852:	ae 01       	movw	r20, r28
     854:	45 5e       	subi	r20, 0xE5	; 229
     856:	5f 4f       	sbci	r21, 0xFF	; 255
     858:	60 2f       	mov	r22, r16
     85a:	89 2d       	mov	r24, r9
     85c:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_voidGetPinValue>
		for(u8 local_u8RowsCounter = 0;local_u8RowsCounter<4;++local_u8RowsCounter){
			DIO_voidGetPinValue(local_u8RowPorts[local_u8RowsCounter],local_u8RowPins[local_u8RowsCounter],&local_u8PinValue);
			//if a key is pressed
			if(local_u8PinValue == 0){
				//while key is holden 
				while(local_u8PinValue == 0){
     860:	8b 8d       	ldd	r24, Y+27	; 0x1b
     862:	88 23       	and	r24, r24
     864:	b1 f3       	breq	.-20     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
					DIO_voidGetPinValue(local_u8RowPorts[local_u8RowsCounter],local_u8RowPins[local_u8RowsCounter],&local_u8PinValue);		
				}
				//return corresponding character
				*copy_pu8pressedKey = local_u8KeypadKeys[local_u8RowsCounter][local_u8ColumnsCounter];
     866:	c7 01       	movw	r24, r14
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	e8 0e       	add	r14, r24
     86e:	f9 1e       	adc	r15, r25
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	8c 0f       	add	r24, r28
     876:	9d 1f       	adc	r25, r29
     878:	e8 0e       	add	r14, r24
     87a:	f9 1e       	adc	r15, r25
     87c:	f7 01       	movw	r30, r14
     87e:	ec 0d       	add	r30, r12
     880:	fd 1d       	adc	r31, r13
     882:	86 85       	ldd	r24, Z+14	; 0x0e
     884:	f5 01       	movw	r30, r10
     886:	80 83       	st	Z, r24
     888:	0d c0       	rjmp	.+26     	; 0x8a4 <__stack+0x45>
	u8 local_u8KeypadKeys[4][3] = KEYPAD_KEYS;  
	u8 local_u8PinValue;
	for(u8 local_u8ColumnsCounter = 0;local_u8ColumnsCounter<3;++local_u8ColumnsCounter){
		DIO_voidSetPinValue(local_u8ColumnPorts[local_u8ColumnsCounter],local_u8ColumnPins[local_u8ColumnsCounter],DIO_LOW);
		
		for(u8 local_u8RowsCounter = 0;local_u8RowsCounter<4;++local_u8RowsCounter){
     88a:	1f 5f       	subi	r17, 0xFF	; 255
     88c:	14 30       	cpi	r17, 0x04	; 4
     88e:	30 f2       	brcs	.-116    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
				//terminate the function
				return;
			}
			
		}
		DIO_voidSetPinValue(local_u8ColumnPorts[local_u8ColumnsCounter],local_u8ColumnPins[local_u8ColumnsCounter],DIO_HIGH);
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	66 2d       	mov	r22, r6
     894:	87 2d       	mov	r24, r7
     896:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
	u8 local_u8RowPins    [] = {KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
	
	
	u8 local_u8KeypadKeys[4][3] = KEYPAD_KEYS;  
	u8 local_u8PinValue;
	for(u8 local_u8ColumnsCounter = 0;local_u8ColumnsCounter<3;++local_u8ColumnsCounter){
     89a:	83 94       	inc	r8
     89c:	f2 e0       	ldi	r31, 0x02	; 2
     89e:	f8 15       	cp	r31, r8
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <__stack+0x45>
     8a2:	a5 cf       	rjmp	.-182    	; 0x7ee <KEYPAD_voidGetPressedKey+0x6e>
			
		}
		DIO_voidSetPinValue(local_u8ColumnPorts[local_u8ColumnsCounter],local_u8ColumnPins[local_u8ColumnsCounter],DIO_HIGH);
	}
	
}
     8a4:	6b 96       	adiw	r28, 0x1b	; 27
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	af 90       	pop	r10
     8c4:	9f 90       	pop	r9
     8c6:	8f 90       	pop	r8
     8c8:	7f 90       	pop	r7
     8ca:	6f 90       	pop	r6
     8cc:	08 95       	ret

000008ce <PRIV_voidEnable>:
}
void LCD_voidShiftDisplayLeft(u8 copy_u8NumberOfShits){
	for(u8 i = 0;i<copy_u8NumberOfShits;++i){
		PRIV_voidSendCommand(0b00011000);
	}
}
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	63 e0       	ldi	r22, 0x03	; 3
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     8d8:	8f e9       	ldi	r24, 0x9F	; 159
     8da:	9f e0       	ldi	r25, 0x0F	; 15
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <PRIV_voidEnable+0xe>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <PRIV_voidEnable+0x14>
     8e2:	00 00       	nop
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	63 e0       	ldi	r22, 0x03	; 3
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     8ee:	08 95       	ret

000008f0 <PRIV_voidSendHalfData>:
     8f0:	cf 93       	push	r28
     8f2:	c8 2f       	mov	r28, r24
     8f4:	48 2f       	mov	r20, r24
     8f6:	41 70       	andi	r20, 0x01	; 1
     8f8:	64 e0       	ldi	r22, 0x04	; 4
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     900:	c1 fb       	bst	r28, 1
     902:	44 27       	eor	r20, r20
     904:	40 f9       	bld	r20, 0
     906:	65 e0       	ldi	r22, 0x05	; 5
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     90e:	c2 fb       	bst	r28, 2
     910:	44 27       	eor	r20, r20
     912:	40 f9       	bld	r20, 0
     914:	66 e0       	ldi	r22, 0x06	; 6
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     91c:	c3 fb       	bst	r28, 3
     91e:	44 27       	eor	r20, r20
     920:	40 f9       	bld	r20, 0
     922:	67 e0       	ldi	r22, 0x07	; 7
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     92a:	0e 94 67 04 	call	0x8ce	; 0x8ce <PRIV_voidEnable>
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <PRIV_voidSendCommand>:
     932:	cf 93       	push	r28
     934:	c8 2f       	mov	r28, r24
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     940:	8c 2f       	mov	r24, r28
     942:	82 95       	swap	r24
     944:	8f 70       	andi	r24, 0x0F	; 15
     946:	0e 94 78 04 	call	0x8f0	; 0x8f0 <PRIV_voidSendHalfData>
     94a:	8c 2f       	mov	r24, r28
     94c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <PRIV_voidSendHalfData>
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <LCD_voidInit>:
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	64 e0       	ldi	r22, 0x04	; 4
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     95e:	41 e0       	ldi	r20, 0x01	; 1
     960:	65 e0       	ldi	r22, 0x05	; 5
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     968:	41 e0       	ldi	r20, 0x01	; 1
     96a:	66 e0       	ldi	r22, 0x06	; 6
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     972:	41 e0       	ldi	r20, 0x01	; 1
     974:	67 e0       	ldi	r22, 0x07	; 7
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     97c:	41 e0       	ldi	r20, 0x01	; 1
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     986:	41 e0       	ldi	r20, 0x01	; 1
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     990:	41 e0       	ldi	r20, 0x01	; 1
     992:	63 e0       	ldi	r22, 0x03	; 3
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	62 e0       	ldi	r22, 0x02	; 2
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     9ae:	2f ef       	ldi	r18, 0xFF	; 255
     9b0:	83 ef       	ldi	r24, 0xF3	; 243
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	21 50       	subi	r18, 0x01	; 1
     9b6:	80 40       	sbci	r24, 0x00	; 0
     9b8:	90 40       	sbci	r25, 0x00	; 0
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <LCD_voidInit+0x60>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <LCD_voidInit+0x6a>
     9be:	00 00       	nop
     9c0:	82 e2       	ldi	r24, 0x22	; 34
     9c2:	0e 94 99 04 	call	0x932	; 0x932 <PRIV_voidSendCommand>
     9c6:	88 e0       	ldi	r24, 0x08	; 8
     9c8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <PRIV_voidSendHalfData>
     9cc:	87 ec       	ldi	r24, 0xC7	; 199
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <LCD_voidInit+0x7c>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <LCD_voidInit+0x82>
     9d6:	00 00       	nop
     9d8:	8c e0       	ldi	r24, 0x0C	; 12
     9da:	0e 94 99 04 	call	0x932	; 0x932 <PRIV_voidSendCommand>
     9de:	87 ec       	ldi	r24, 0xC7	; 199
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <LCD_voidInit+0x8e>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <LCD_voidInit+0x94>
     9e8:	00 00       	nop
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	0e 94 99 04 	call	0x932	; 0x932 <PRIV_voidSendCommand>
     9f0:	8f e3       	ldi	r24, 0x3F	; 63
     9f2:	9f e1       	ldi	r25, 0x1F	; 31
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <LCD_voidInit+0xa0>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <LCD_voidInit+0xa6>
     9fa:	00 00       	nop
     9fc:	86 e0       	ldi	r24, 0x06	; 6
     9fe:	0e 94 99 04 	call	0x932	; 0x932 <PRIV_voidSendCommand>
     a02:	08 95       	ret

00000a04 <LCD_voidDisplayCharacter>:
     a04:	cf 93       	push	r28
     a06:	c8 2f       	mov	r28, r24
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
     a12:	8c 2f       	mov	r24, r28
     a14:	82 95       	swap	r24
     a16:	8f 70       	andi	r24, 0x0F	; 15
     a18:	0e 94 78 04 	call	0x8f0	; 0x8f0 <PRIV_voidSendHalfData>
     a1c:	8c 2f       	mov	r24, r28
     a1e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <PRIV_voidSendHalfData>
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <LCD_voidDisplayString>:
void LCD_voidDisplayString(const char copy_pu8string[]){
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	8c 01       	movw	r16, r24
	u8 local_u8currentChar = copy_pu8string[0];
     a2e:	fc 01       	movw	r30, r24
     a30:	80 81       	ld	r24, Z
	u8 local_u8currentCharindex = 0;
     a32:	c0 e0       	ldi	r28, 0x00	; 0
	while(local_u8currentChar != '\0'){
     a34:	07 c0       	rjmp	.+14     	; 0xa44 <LCD_voidDisplayString+0x1e>
		LCD_voidDisplayCharacter(local_u8currentChar);
     a36:	0e 94 02 05 	call	0xa04	; 0xa04 <LCD_voidDisplayCharacter>
		++local_u8currentCharindex;
     a3a:	cf 5f       	subi	r28, 0xFF	; 255
		local_u8currentChar = copy_pu8string[local_u8currentCharindex];
     a3c:	f8 01       	movw	r30, r16
     a3e:	ec 0f       	add	r30, r28
     a40:	f1 1d       	adc	r31, r1
     a42:	80 81       	ld	r24, Z
	}
}
void LCD_voidDisplayString(const char copy_pu8string[]){
	u8 local_u8currentChar = copy_pu8string[0];
	u8 local_u8currentCharindex = 0;
	while(local_u8currentChar != '\0'){
     a44:	81 11       	cpse	r24, r1
     a46:	f7 cf       	rjmp	.-18     	; 0xa36 <LCD_voidDisplayString+0x10>
		LCD_voidDisplayCharacter(local_u8currentChar);
		++local_u8currentCharindex;
		local_u8currentChar = copy_pu8string[local_u8currentCharindex];
	}
}
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	08 95       	ret

00000a50 <LCD_voidMoveToSecondLine>:
void LCD_voidMoveToSecondLine(void){
	PRIV_voidSendCommand(0b11000000);	
     a50:	80 ec       	ldi	r24, 0xC0	; 192
     a52:	0e 94 99 04 	call	0x932	; 0x932 <PRIV_voidSendCommand>
     a56:	08 95       	ret

00000a58 <LCD_voidClearDisplay>:
}
void LCD_voidClearDisplay(void){
	PRIV_voidSendCommand(0b0000001);
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	0e 94 99 04 	call	0x932	; 0x932 <PRIV_voidSendCommand>
     a5e:	08 95       	ret

00000a60 <LCD_voidDisplayNumber>:
}
void LCD_voidDisplayNumber(u32 copy_u32Number){
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	8b 01       	movw	r16, r22
     a6e:	9c 01       	movw	r18, r24
	u32 local_u32ReservedNumber = 1;
	if(copy_u32Number == 0){
     a70:	67 2b       	or	r22, r23
     a72:	68 2b       	or	r22, r24
     a74:	69 2b       	or	r22, r25
     a76:	61 f5       	brne	.+88     	; 0xad0 <LCD_voidDisplayNumber+0x70>
		LCD_voidDisplayNumber('0');
     a78:	60 e3       	ldi	r22, 0x30	; 48
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 30 05 	call	0xa60	; 0xa60 <LCD_voidDisplayNumber>
     a84:	46 c0       	rjmp	.+140    	; 0xb12 <LCD_voidDisplayNumber+0xb2>
	}
	else{
		while(copy_u32Number != 0){
			local_u32ReservedNumber *= 10;
     a86:	dc 01       	movw	r26, r24
     a88:	cb 01       	movw	r24, r22
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	aa 1f       	adc	r26, r26
     a90:	bb 1f       	adc	r27, r27
     a92:	6c 01       	movw	r12, r24
     a94:	7d 01       	movw	r14, r26
     a96:	cc 0c       	add	r12, r12
     a98:	dd 1c       	adc	r13, r13
     a9a:	ee 1c       	adc	r14, r14
     a9c:	ff 1c       	adc	r15, r15
     a9e:	cc 0c       	add	r12, r12
     aa0:	dd 1c       	adc	r13, r13
     aa2:	ee 1c       	adc	r14, r14
     aa4:	ff 1c       	adc	r15, r15
     aa6:	c8 0e       	add	r12, r24
     aa8:	d9 1e       	adc	r13, r25
     aaa:	ea 1e       	adc	r14, r26
     aac:	fb 1e       	adc	r15, r27
			local_u32ReservedNumber += copy_u32Number%10;
     aae:	c9 01       	movw	r24, r18
     ab0:	b8 01       	movw	r22, r16
     ab2:	2a e0       	ldi	r18, 0x0A	; 10
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__udivmodsi4>
     abe:	6c 0d       	add	r22, r12
     ac0:	7d 1d       	adc	r23, r13
     ac2:	8e 1d       	adc	r24, r14
     ac4:	9f 1d       	adc	r25, r15
			copy_u32Number /= 10;
     ac6:	02 2f       	mov	r16, r18
     ac8:	13 2f       	mov	r17, r19
     aca:	24 2f       	mov	r18, r20
     acc:	35 2f       	mov	r19, r21
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <LCD_voidDisplayNumber+0x78>
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
	u32 local_u32ReservedNumber = 1;
	if(copy_u32Number == 0){
		LCD_voidDisplayNumber('0');
	}
	else{
		while(copy_u32Number != 0){
     ad8:	01 15       	cp	r16, r1
     ada:	11 05       	cpc	r17, r1
     adc:	21 05       	cpc	r18, r1
     ade:	31 05       	cpc	r19, r1
     ae0:	91 f6       	brne	.-92     	; 0xa86 <LCD_voidDisplayNumber+0x26>
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <LCD_voidDisplayNumber+0xa8>
			local_u32ReservedNumber *= 10;
			local_u32ReservedNumber += copy_u32Number%10;
			copy_u32Number /= 10;
		}
		while(local_u32ReservedNumber != 1){
			LCD_voidDisplayCharacter((local_u32ReservedNumber%10)+'0');
     ae4:	2a e0       	ldi	r18, 0x0A	; 10
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__udivmodsi4>
     af0:	e2 2e       	mov	r14, r18
     af2:	f3 2e       	mov	r15, r19
     af4:	04 2f       	mov	r16, r20
     af6:	15 2f       	mov	r17, r21
     af8:	80 e3       	ldi	r24, 0x30	; 48
     afa:	86 0f       	add	r24, r22
     afc:	0e 94 02 05 	call	0xa04	; 0xa04 <LCD_voidDisplayCharacter>
			local_u32ReservedNumber /=10;
     b00:	6e 2d       	mov	r22, r14
     b02:	7f 2d       	mov	r23, r15
     b04:	80 2f       	mov	r24, r16
     b06:	91 2f       	mov	r25, r17
		while(copy_u32Number != 0){
			local_u32ReservedNumber *= 10;
			local_u32ReservedNumber += copy_u32Number%10;
			copy_u32Number /= 10;
		}
		while(local_u32ReservedNumber != 1){
     b08:	61 30       	cpi	r22, 0x01	; 1
     b0a:	71 05       	cpc	r23, r1
     b0c:	81 05       	cpc	r24, r1
     b0e:	91 05       	cpc	r25, r1
     b10:	49 f7       	brne	.-46     	; 0xae4 <LCD_voidDisplayNumber+0x84>
			LCD_voidDisplayCharacter((local_u32ReservedNumber%10)+'0');
			local_u32ReservedNumber /=10;
		}
		return;
	}
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	08 95       	ret

00000b20 <main>:
#include "smart_home_system_interface.h"


int main(void)
{
	SmartHome_voidInitSystem();
     b20:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SmartHome_voidInitSystem>
    while (1) 
    {
		SmartHome_voidTerminalLoginMainMenu();
     b24:	0e 94 a6 09 	call	0x134c	; 0x134c <SmartHome_voidTerminalLoginMainMenu>
     b28:	fd cf       	rjmp	.-6      	; 0xb24 <main+0x4>

00000b2a <PWM1_voidInit>:
#include "pwm1_registers.h"
#include "DIO_interface.h"

void PWM1_voidInit(){
	//setting non inverting mode and PWM output on pin OC1A
	CLEAR_BIT(TCCR1A_REGISTER,COM1A0_BIT);
     b2a:	8f b5       	in	r24, 0x2f	; 47
     b2c:	8f 7b       	andi	r24, 0xBF	; 191
     b2e:	8f bd       	out	0x2f, r24	; 47
	SET_BIT  (TCCR1A_REGISTER,COM1A1_BIT);
     b30:	8f b5       	in	r24, 0x2f	; 47
     b32:	80 68       	ori	r24, 0x80	; 128
     b34:	8f bd       	out	0x2f, r24	; 47
	//choosing fast PWM with top value of ICR1 (mode 14 in data sheet)
	CLEAR_BIT(TCCR1A_REGISTER,WGM10_BIT);
     b36:	8f b5       	in	r24, 0x2f	; 47
     b38:	8e 7f       	andi	r24, 0xFE	; 254
     b3a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT  (TCCR1A_REGISTER,WGM11_BIT);
     b3c:	8f b5       	in	r24, 0x2f	; 47
     b3e:	82 60       	ori	r24, 0x02	; 2
     b40:	8f bd       	out	0x2f, r24	; 47
	SET_BIT  (TCCR1B_REGISTER,WGM12_BIT);
     b42:	8e b5       	in	r24, 0x2e	; 46
     b44:	88 60       	ori	r24, 0x08	; 8
     b46:	8e bd       	out	0x2e, r24	; 46
	SET_BIT  (TCCR1B_REGISTER,WGM13_BIT);
     b48:	8e b5       	in	r24, 0x2e	; 46
     b4a:	80 61       	ori	r24, 0x10	; 16
     b4c:	8e bd       	out	0x2e, r24	; 46
	//set OCR1A pin as output
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     b58:	08 95       	ret

00000b5a <PWM1_voidStart>:
	
}
void PWM1_voidStart(f32 copy_f32DutycycleValue,u16 copy_u16PWMfrequency){
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	6b 01       	movw	r12, r22
     b64:	7c 01       	movw	r14, r24
	//set frequency
	ICR1_REGISTER  = (PWM1_TIMER1_FREQUENCY/copy_u16PWMfrequency)-1;
     b66:	9a 01       	movw	r18, r20
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	60 e9       	ldi	r22, 0x90	; 144
     b6e:	70 ed       	ldi	r23, 0xD0	; 208
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__udivmodsi4>
     b78:	21 50       	subi	r18, 0x01	; 1
     b7a:	31 09       	sbc	r19, r1
     b7c:	37 bd       	out	0x27, r19	; 39
     b7e:	26 bd       	out	0x26, r18	; 38
	//set duty cycle
	OCR1A_REGISTER = (copy_f32DutycycleValue*(ICR1_REGISTER+1)/100)-1;
     b80:	66 b5       	in	r22, 0x26	; 38
     b82:	77 b5       	in	r23, 0x27	; 39
     b84:	6f 5f       	subi	r22, 0xFF	; 255
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__floatunsisf>
     b90:	a7 01       	movw	r20, r14
     b92:	96 01       	movw	r18, r12
     b94:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__mulsf3>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	48 ec       	ldi	r20, 0xC8	; 200
     b9e:	52 e4       	ldi	r21, 0x42	; 66
     ba0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__divsf3>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e8       	ldi	r20, 0x80	; 128
     baa:	5f e3       	ldi	r21, 0x3F	; 63
     bac:	0e 94 ad 0b 	call	0x175a	; 0x175a <__subsf3>
     bb0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__fixunssfsi>
     bb4:	7b bd       	out	0x2b, r23	; 43
     bb6:	6a bd       	out	0x2a, r22	; 42
	//set prescaller to 64
	SET_BIT  (TCCR1B_REGISTER, CS10_BIT );
     bb8:	8e b5       	in	r24, 0x2e	; 46
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	8e bd       	out	0x2e, r24	; 46
	SET_BIT  (TCCR1B_REGISTER, CS11_BIT );
     bbe:	8e b5       	in	r24, 0x2e	; 46
     bc0:	82 60       	ori	r24, 0x02	; 2
     bc2:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B_REGISTER, CS12_BIT); 
     bc4:	8e b5       	in	r24, 0x2e	; 46
     bc6:	8b 7f       	andi	r24, 0xFB	; 251
     bc8:	8e bd       	out	0x2e, r24	; 46
}
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	08 95       	ret

00000bd4 <PWM2_voidInit>:
#include "pwm2_registers.h"


void PWM2_voidInit (){
	//set fast PWM mode
	SET_BIT(TCCR2_REGISTER,WGM20_BIT);
     bd4:	85 b5       	in	r24, 0x25	; 37
     bd6:	80 64       	ori	r24, 0x40	; 64
     bd8:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2_REGISTER,WGM21_BIT);
     bda:	85 b5       	in	r24, 0x25	; 37
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	85 bd       	out	0x25, r24	; 37
	//set PWM mode to non inverting
	SET_BIT  (TCCR2_REGISTER,COM21_BIT);
     be0:	85 b5       	in	r24, 0x25	; 37
     be2:	80 62       	ori	r24, 0x20	; 32
     be4:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2_REGISTER,COM20_BIT);
     be6:	85 b5       	in	r24, 0x25	; 37
     be8:	8f 7e       	andi	r24, 0xEF	; 239
     bea:	85 bd       	out	0x25, r24	; 37
	//set oc2 pin as output
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	67 e0       	ldi	r22, 0x07	; 7
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     bf6:	08 95       	ret

00000bf8 <PWM2_voidStart>:
}
void PWM2_voidStart(u8 copy_u8DutyCycle){
	OCR2_REGISTER = (((copy_u8DutyCycle*256)/100)-1);
     bf8:	98 2f       	mov	r25, r24
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	64 e6       	ldi	r22, 0x64	; 100
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__divmodhi4>
     c04:	61 50       	subi	r22, 0x01	; 1
     c06:	63 bd       	out	0x23, r22	; 35
	
	//set prescaller to 64 & start timer
	SET_BIT  (TCCR2_REGISTER,CS20_BIT);
     c08:	85 b5       	in	r24, 0x25	; 37
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	85 bd       	out	0x25, r24	; 37
	SET_BIT  (TCCR2_REGISTER,CS21_BIT);
     c0e:	85 b5       	in	r24, 0x25	; 37
     c10:	82 60       	ori	r24, 0x02	; 2
     c12:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2_REGISTER,CS22_BIT);
     c14:	85 b5       	in	r24, 0x25	; 37
     c16:	8b 7f       	andi	r24, 0xFB	; 251
     c18:	85 bd       	out	0x25, r24	; 37
     c1a:	08 95       	ret

00000c1c <PWM2_voidStop>:
}
void PWM2_voidStop (){
	CLEAR_BIT(TCCR2_REGISTER,CS20_BIT);
     c1c:	85 b5       	in	r24, 0x25	; 37
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2_REGISTER,CS21_BIT);
     c22:	85 b5       	in	r24, 0x25	; 37
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	85 bd       	out	0x25, r24	; 37
	CLEAR_BIT(TCCR2_REGISTER,CS22_BIT);
     c28:	85 b5       	in	r24, 0x25	; 37
     c2a:	8b 7f       	andi	r24, 0xFB	; 251
     c2c:	85 bd       	out	0x25, r24	; 37
     c2e:	08 95       	ret

00000c30 <priv_voidTempSensorSystem>:
		}
		break;
	}
}

void priv_voidTempSensorSystem(){
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
	u16 local_u16DigitalValue;
	u16 local_u16AnalogValue;
	local_u16DigitalValue = ADC_u16GetAdcResult(ADC_ADC0);
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 81 00 	call	0x102	; 0x102 <ADC_u16GetAdcResult>
	local_u16AnalogValue = ((u32)local_u16DigitalValue*500)/1024;
     c42:	9c 01       	movw	r18, r24
     c44:	a4 ef       	ldi	r26, 0xF4	; 244
     c46:	b1 e0       	ldi	r27, 0x01	; 1
     c48:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__umulhisi3>
     c4c:	6b 01       	movw	r12, r22
     c4e:	7c 01       	movw	r14, r24
     c50:	0b 2e       	mov	r0, r27
     c52:	ba e0       	ldi	r27, 0x0A	; 10
     c54:	f6 94       	lsr	r15
     c56:	e7 94       	ror	r14
     c58:	d7 94       	ror	r13
     c5a:	c7 94       	ror	r12
     c5c:	ba 95       	dec	r27
     c5e:	d1 f7       	brne	.-12     	; 0xc54 <priv_voidTempSensorSystem+0x24>
     c60:	b0 2d       	mov	r27, r0
     c62:	e6 01       	movw	r28, r12
	LCD_voidClearDisplay();
     c64:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_voidClearDisplay>
	LCD_voidDisplayString("Temperature:");
     c68:	8c e6       	ldi	r24, 0x6C	; 108
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_voidDisplayString>
	LCD_voidDisplayNumber(local_u16AnalogValue);
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	88 27       	eor	r24, r24
     c76:	99 27       	eor	r25, r25
     c78:	0e 94 30 05 	call	0xa60	; 0xa60 <LCD_voidDisplayNumber>
	LCD_voidDisplayCharacter('C');
     c7c:	83 e4       	ldi	r24, 0x43	; 67
     c7e:	0e 94 02 05 	call	0xa04	; 0xa04 <LCD_voidDisplayCharacter>
	if(local_u16AnalogValue >= 37){
     c82:	c5 32       	cpi	r28, 0x25	; 37
     c84:	d1 05       	cpc	r29, r1
     c86:	20 f0       	brcs	.+8      	; 0xc90 <priv_voidTempSensorSystem+0x60>
		PWM2_voidStart(100);
     c88:	84 e6       	ldi	r24, 0x64	; 100
     c8a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <PWM2_voidStart>
     c8e:	1b c0       	rjmp	.+54     	; 0xcc6 <priv_voidTempSensorSystem+0x96>
	}
	else if(local_u16AnalogValue >= 34){
     c90:	c2 32       	cpi	r28, 0x22	; 34
     c92:	d1 05       	cpc	r29, r1
     c94:	20 f0       	brcs	.+8      	; 0xc9e <priv_voidTempSensorSystem+0x6e>
		PWM2_voidStart(75);
     c96:	8b e4       	ldi	r24, 0x4B	; 75
     c98:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <PWM2_voidStart>
     c9c:	14 c0       	rjmp	.+40     	; 0xcc6 <priv_voidTempSensorSystem+0x96>
	}
	else if(local_u16AnalogValue >= 30){
     c9e:	ce 31       	cpi	r28, 0x1E	; 30
     ca0:	d1 05       	cpc	r29, r1
     ca2:	20 f0       	brcs	.+8      	; 0xcac <priv_voidTempSensorSystem+0x7c>
		PWM2_voidStart(50);
     ca4:	82 e3       	ldi	r24, 0x32	; 50
     ca6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <PWM2_voidStart>
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <priv_voidTempSensorSystem+0x96>
	}
	else if(local_u16AnalogValue >= 27){
     cac:	6b 97       	sbiw	r28, 0x1b	; 27
     cae:	20 f0       	brcs	.+8      	; 0xcb8 <priv_voidTempSensorSystem+0x88>
		PWM2_voidStart(25);
     cb0:	89 e1       	ldi	r24, 0x19	; 25
     cb2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <PWM2_voidStart>
     cb6:	07 c0       	rjmp	.+14     	; 0xcc6 <priv_voidTempSensorSystem+0x96>
	}
	else{
		DIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
		PWM2_voidStop();
     cc2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <PWM2_voidStop>
	}
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	08 95       	ret

00000cd4 <priv_voidInitLightSystem>:
	priv_voidInitLightSystem();
	EEPROM_voidWriteByte(USER_COUNTER_ADDRESSS,0);
}

void priv_voidInitLightSystem(){
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_OUTPUT);
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN3,DIO_OUTPUT);
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	63 e0       	ldi	r22, 0x03	; 3
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN4,DIO_OUTPUT);
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	64 e0       	ldi	r22, 0x04	; 4
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN5,DIO_OUTPUT);
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	65 e0       	ldi	r22, 0x05	; 5
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_voidSetPinDirection>
     cfc:	08 95       	ret

00000cfe <SmartHome_voidInitSystem>:
#include "pwm2_interface.h"
//=========================//


void SmartHome_voidInitSystem(){
	GI_voidEnableGeneralInterrupt();
     cfe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <GI_voidEnableGeneralInterrupt>
	EEPROM_voidInit();
     d02:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_voidInit>
	UART_voidInit();
     d06:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <UART_voidInit>
	ADC_voidInit(ADC_AVCC);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_voidInit>
	PWM1_voidInit();
     d10:	0e 94 95 05 	call	0xb2a	; 0xb2a <PWM1_voidInit>
	LCD_voidInit();
     d14:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidInit>
	KEYPAD_voidInit();
     d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <KEYPAD_voidInit>
	EXTI_voidExternalInterruptInit(EXTI_EXTI0,EXTI_RISING_EDGE);
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 91 02 	call	0x522	; 0x522 <EXTI_voidExternalInterruptInit>
	EXTI_voidExternalInterruptEnable(EXTI_EXTI0);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 ed 02 	call	0x5da	; 0x5da <EXTI_voidExternalInterruptEnable>
	TIMER0_voidInit(TIMER0_CTC_MODE);
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TIMER0_voidInit>
	TIMER0_voidSetCallBackFunction(priv_voidTempSensorSystem);
     d30:	88 e1       	ldi	r24, 0x18	; 24
     d32:	96 e0       	ldi	r25, 0x06	; 6
     d34:	0e 94 00 0b 	call	0x1600	; 0x1600 <TIMER0_voidSetCallBackFunction>
	TIMER0_voidStartTimer();
     d38:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <TIMER0_voidStartTimer>
	PWM2_voidInit();
     d3c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <PWM2_voidInit>
	priv_voidInitLightSystem();
     d40:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <priv_voidInitLightSystem>
	EEPROM_voidWriteByte(USER_COUNTER_ADDRESSS,0);
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_voidWriteByte>
     d4e:	08 95       	ret

00000d50 <priv_voidAddUser>:
			_delay_ms(2000);
		}
}


void priv_voidAddUser() {
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <priv_voidAddUser+0x10>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <priv_voidAddUser+0x12>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8NumberOfUsers = 0;
     d66:	19 82       	std	Y+1, r1	; 0x01
	bool validUserId = false;
	u8 local_u8StoredUserId;
	bool userIdExists = false;
	
	// get number of users in the system
	EEPROM_voidReadByte(USER_COUNTER_ADDRESSS, &local_u8NumberOfUsers);
     d68:	be 01       	movw	r22, r28
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <EEPROM_voidReadByte>
	
	if (local_u8NumberOfUsers >= MAX_NUMBER_OF_USERS) {
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	82 33       	cpi	r24, 0x32	; 50
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <priv_voidAddUser+0x2e>
     d7c:	79 c0       	rjmp	.+242    	; 0xe70 <priv_voidAddUser+0x120>
		UART_voidTxString("Max number of users reached!\r\n");
     d7e:	89 e7       	ldi	r24, 0x79	; 121
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
     d86:	2f ef       	ldi	r18, 0xFF	; 255
     d88:	87 ea       	ldi	r24, 0xA7	; 167
     d8a:	91 e6       	ldi	r25, 0x61	; 97
     d8c:	21 50       	subi	r18, 0x01	; 1
     d8e:	80 40       	sbci	r24, 0x00	; 0
     d90:	90 40       	sbci	r25, 0x00	; 0
     d92:	e1 f7       	brne	.-8      	; 0xd8c <priv_voidAddUser+0x3c>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <priv_voidAddUser+0x46>
     d96:	00 00       	nop
     d98:	aa c0       	rjmp	.+340    	; 0xeee <priv_voidAddUser+0x19e>
	
	// Get user ID and add it to memory
	while (!validUserId) { // Continue until valid user ID is entered
		userIdExists = false;
		local_u16userId = 0;
		UART_voidTxString("Enter new user ID: ");
     d9a:	88 e9       	ldi	r24, 0x98	; 152
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		
		// Input user ID
		for (int i = 0; i < USER_ID_SIZE; ++i) {
     da2:	00 e0       	ldi	r16, 0x00	; 0
     da4:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Get user ID and add it to memory
	while (!validUserId) { // Continue until valid user ID is entered
		userIdExists = false;
		local_u16userId = 0;
     da6:	e1 2c       	mov	r14, r1
     da8:	f1 2c       	mov	r15, r1
		UART_voidTxString("Enter new user ID: ");
		
		// Input user ID
		for (int i = 0; i < USER_ID_SIZE; ++i) {
     daa:	16 c0       	rjmp	.+44     	; 0xdd8 <priv_voidAddUser+0x88>
			local_u16userId *= 10;
     dac:	c7 01       	movw	r24, r14
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	ee 0c       	add	r14, r14
     db4:	ff 1c       	adc	r15, r15
     db6:	ee 0c       	add	r14, r14
     db8:	ff 1c       	adc	r15, r15
     dba:	ee 0c       	add	r14, r14
     dbc:	ff 1c       	adc	r15, r15
     dbe:	e8 0e       	add	r14, r24
     dc0:	f9 1e       	adc	r15, r25
			UART_voidRxChar(&local_u8userIdDigit);
     dc2:	ce 01       	movw	r24, r28
     dc4:	03 96       	adiw	r24, 0x03	; 3
     dc6:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
			local_u8userIdDigit -= '0';
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	80 53       	subi	r24, 0x30	; 48
     dce:	8b 83       	std	Y+3, r24	; 0x03
			local_u16userId += local_u8userIdDigit;
     dd0:	e8 0e       	add	r14, r24
     dd2:	f1 1c       	adc	r15, r1
		userIdExists = false;
		local_u16userId = 0;
		UART_voidTxString("Enter new user ID: ");
		
		// Input user ID
		for (int i = 0; i < USER_ID_SIZE; ++i) {
     dd4:	0f 5f       	subi	r16, 0xFF	; 255
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	03 30       	cpi	r16, 0x03	; 3
     dda:	11 05       	cpc	r17, r1
     ddc:	3c f3       	brlt	.-50     	; 0xdac <priv_voidAddUser+0x5c>
			UART_voidRxChar(&local_u8userIdDigit);
			local_u8userIdDigit -= '0';
			local_u16userId += local_u8userIdDigit;
		}
		
		UART_voidTxString("\r\n"); // New line
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		
		// Validate user ID range
		if (local_u16userId > 255 || local_u16userId < 100) {
     de6:	c7 01       	movw	r24, r14
     de8:	84 56       	subi	r24, 0x64	; 100
     dea:	91 09       	sbc	r25, r1
     dec:	8c 39       	cpi	r24, 0x9C	; 156
     dee:	91 05       	cpc	r25, r1
     df0:	58 f1       	brcs	.+86     	; 0xe48 <priv_voidAddUser+0xf8>
			UART_voidTxString("User ID isn't valid!\r\n");
     df2:	8c ea       	ldi	r24, 0xAC	; 172
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
     dfa:	2f ef       	ldi	r18, 0xFF	; 255
     dfc:	87 ea       	ldi	r24, 0xA7	; 167
     dfe:	91 e6       	ldi	r25, 0x61	; 97
     e00:	21 50       	subi	r18, 0x01	; 1
     e02:	80 40       	sbci	r24, 0x00	; 0
     e04:	90 40       	sbci	r25, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <priv_voidAddUser+0xb0>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <priv_voidAddUser+0xba>
     e0a:	00 00       	nop
			_delay_ms(2000);
			continue; // Ask for a new ID
     e0c:	34 c0       	rjmp	.+104    	; 0xe76 <priv_voidAddUser+0x126>
		}

		// Check if the user ID already exists
		for (int i = 0; i < local_u8NumberOfUsers * (PASSWORD_LENGTH + 1); i += PASSWORD_LENGTH + 1) {
			EEPROM_voidReadByte(i, &local_u8StoredUserId);
     e0e:	be 01       	movw	r22, r28
     e10:	6c 5f       	subi	r22, 0xFC	; 252
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	c8 01       	movw	r24, r16
     e16:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <EEPROM_voidReadByte>
			if (local_u8StoredUserId == local_u16userId) {
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	e8 16       	cp	r14, r24
     e20:	f9 06       	cpc	r15, r25
     e22:	79 f4       	brne	.+30     	; 0xe42 <priv_voidAddUser+0xf2>
				UART_voidTxString("This user ID already exists.\r\n");
     e24:	83 ec       	ldi	r24, 0xC3	; 195
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
     e2c:	2f ef       	ldi	r18, 0xFF	; 255
     e2e:	87 ea       	ldi	r24, 0xA7	; 167
     e30:	91 e6       	ldi	r25, 0x61	; 97
     e32:	21 50       	subi	r18, 0x01	; 1
     e34:	80 40       	sbci	r24, 0x00	; 0
     e36:	90 40       	sbci	r25, 0x00	; 0
     e38:	e1 f7       	brne	.-8      	; 0xe32 <priv_voidAddUser+0xe2>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <priv_voidAddUser+0xec>
     e3c:	00 00       	nop
				_delay_ms(2000);
				userIdExists = true; // Mark as existing
     e3e:	81 e0       	ldi	r24, 0x01	; 1
				break;
     e40:	12 c0       	rjmp	.+36     	; 0xe66 <priv_voidAddUser+0x116>
			_delay_ms(2000);
			continue; // Ask for a new ID
		}

		// Check if the user ID already exists
		for (int i = 0; i < local_u8NumberOfUsers * (PASSWORD_LENGTH + 1); i += PASSWORD_LENGTH + 1) {
     e42:	0b 5f       	subi	r16, 0xFB	; 251
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <priv_voidAddUser+0xfc>
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9c 01       	movw	r18, r24
     e52:	22 0f       	add	r18, r18
     e54:	33 1f       	adc	r19, r19
     e56:	22 0f       	add	r18, r18
     e58:	33 1f       	adc	r19, r19
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	08 17       	cp	r16, r24
     e60:	19 07       	cpc	r17, r25
     e62:	ac f2       	brlt	.-86     	; 0xe0e <priv_voidAddUser+0xbe>
		return;
	}
	
	// Get user ID and add it to memory
	while (!validUserId) { // Continue until valid user ID is entered
		userIdExists = false;
     e64:	80 e0       	ldi	r24, 0x00	; 0
				break;
			}
		}

		// If no conflict, set validUserId to true
		if (!userIdExists) {
     e66:	81 11       	cpse	r24, r1
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <priv_voidAddUser+0x126>
			validUserId = true;
     e6a:	dd 24       	eor	r13, r13
     e6c:	d3 94       	inc	r13
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <priv_voidAddUser+0x126>
     e70:	d1 2c       	mov	r13, r1
     e72:	e1 2c       	mov	r14, r1
     e74:	f1 2c       	mov	r15, r1
		_delay_ms(2000);
		return;
	}
	
	// Get user ID and add it to memory
	while (!validUserId) { // Continue until valid user ID is entered
     e76:	dd 20       	and	r13, r13
     e78:	09 f4       	brne	.+2      	; 0xe7c <priv_voidAddUser+0x12c>
     e7a:	8f cf       	rjmp	.-226    	; 0xd9a <priv_voidAddUser+0x4a>
			validUserId = true;
		}
	}

	// Store the user ID in memory
	EEPROM_voidWriteByte(local_u8NumberOfUsers * (PASSWORD_LENGTH + 1), local_u16userId);
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9c 01       	movw	r18, r24
     e82:	22 0f       	add	r18, r18
     e84:	33 1f       	adc	r19, r19
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	6e 2d       	mov	r22, r14
     e8c:	82 0f       	add	r24, r18
     e8e:	93 1f       	adc	r25, r19
     e90:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_voidWriteByte>

	// Get password from user and store it
	UART_voidTxString("Set new user password: ");
     e94:	82 ee       	ldi	r24, 0xE2	; 226
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	for (int i = 0; i < PASSWORD_LENGTH; ++i) {
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	15 c0       	rjmp	.+42     	; 0xecc <priv_voidAddUser+0x17c>
		UART_voidRxChar(&local_u8PasswordDigit);
     ea2:	ce 01       	movw	r24, r28
     ea4:	02 96       	adiw	r24, 0x02	; 2
     ea6:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
		EEPROM_voidWriteByte(local_u8NumberOfUsers * (PASSWORD_LENGTH + 1) + 1 + i, local_u8PasswordDigit);
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9c 01       	movw	r18, r24
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	22 0f       	add	r18, r18
     eb6:	33 1f       	adc	r19, r19
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	6a 81       	ldd	r22, Y+2	; 0x02
     ec0:	80 0f       	add	r24, r16
     ec2:	91 1f       	adc	r25, r17
     ec4:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_voidWriteByte>
	// Store the user ID in memory
	EEPROM_voidWriteByte(local_u8NumberOfUsers * (PASSWORD_LENGTH + 1), local_u16userId);

	// Get password from user and store it
	UART_voidTxString("Set new user password: ");
	for (int i = 0; i < PASSWORD_LENGTH; ++i) {
     ec8:	0f 5f       	subi	r16, 0xFF	; 255
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	04 30       	cpi	r16, 0x04	; 4
     ece:	11 05       	cpc	r17, r1
     ed0:	44 f3       	brlt	.-48     	; 0xea2 <priv_voidAddUser+0x152>
		UART_voidRxChar(&local_u8PasswordDigit);
		EEPROM_voidWriteByte(local_u8NumberOfUsers * (PASSWORD_LENGTH + 1) + 1 + i, local_u8PasswordDigit);
	}

	UART_voidTxChar('\f'); // Clear display
     ed2:	8c e0       	ldi	r24, 0x0C	; 12
     ed4:	0e 94 8e 0b 	call	0x171c	; 0x171c <UART_voidTxChar>
	
	// Increment the number of users and update in memory
	local_u8NumberOfUsers++;
     ed8:	69 81       	ldd	r22, Y+1	; 0x01
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	69 83       	std	Y+1, r22	; 0x01
	EEPROM_voidWriteByte(USER_COUNTER_ADDRESSS, local_u8NumberOfUsers);
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 4e 02 	call	0x49c	; 0x49c <EEPROM_voidWriteByte>
	
	UART_voidTxString("User added!\r\n");
     ee6:	8a ef       	ldi	r24, 0xFA	; 250
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	df 90       	pop	r13
     f04:	08 95       	ret

00000f06 <priv_voidLockSystem>:
			return;
			break;
		}
	}
}
void priv_voidLockSystem(){
     f06:	ff cf       	rjmp	.-2      	; 0xf06 <priv_voidLockSystem>

00000f08 <priv_voidCheckPassword>:
}




void priv_voidCheckPassword(u8* copy_pu8UserPassword){
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	00 d0       	rcall	.+0      	; 0xf18 <priv_voidCheckPassword+0x10>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <priv_voidCheckPassword+0x12>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	7c 01       	movw	r14, r24
	u8 local_u8WrongPasswordCounter = 0;
     f20:	d1 2c       	mov	r13, r1
	u8 local_u8InputPassword[PASSWORD_LENGTH];
	//loop to get input password and check if the input password is correct
	while(local_u8WrongPasswordCounter < MAX_NUMBER_OF_WRONG_ATTEMPTS){
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <priv_voidCheckPassword+0x9a>
		bool local_boolRightPassword    = true;
		UART_voidTxString("enter password:");
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		
		//get user input
		for(int i = 0;i<PASSWORD_LENGTH;++i){
     f2c:	00 e0       	ldi	r16, 0x00	; 0
     f2e:	10 e0       	ldi	r17, 0x00	; 0
     f30:	0a c0       	rjmp	.+20     	; 0xf46 <priv_voidCheckPassword+0x3e>
			UART_voidRxChar(&local_u8InputPassword[i]);
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	8c 0f       	add	r24, r28
     f38:	9d 1f       	adc	r25, r29
     f3a:	80 0f       	add	r24, r16
     f3c:	91 1f       	adc	r25, r17
     f3e:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
	while(local_u8WrongPasswordCounter < MAX_NUMBER_OF_WRONG_ATTEMPTS){
		bool local_boolRightPassword    = true;
		UART_voidTxString("enter password:");
		
		//get user input
		for(int i = 0;i<PASSWORD_LENGTH;++i){
     f42:	0f 5f       	subi	r16, 0xFF	; 255
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	04 30       	cpi	r16, 0x04	; 4
     f48:	11 05       	cpc	r17, r1
     f4a:	9c f3       	brlt	.-26     	; 0xf32 <priv_voidCheckPassword+0x2a>
			UART_voidRxChar(&local_u8InputPassword[i]);
		}
		UART_voidTxString("\r\n");//new line
     f4c:	85 e0       	ldi	r24, 0x05	; 5
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		
		//check input password
		for(int i = 0;i<PASSWORD_LENGTH;++i){
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	1e c0       	rjmp	.+60     	; 0xf96 <priv_voidCheckPassword+0x8e>
			if(local_u8InputPassword[i] != copy_pu8UserPassword[i]){
     f5a:	e1 e0       	ldi	r30, 0x01	; 1
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	ec 0f       	add	r30, r28
     f60:	fd 1f       	adc	r31, r29
     f62:	e8 0f       	add	r30, r24
     f64:	f9 1f       	adc	r31, r25
     f66:	30 81       	ld	r19, Z
     f68:	f7 01       	movw	r30, r14
     f6a:	e8 0f       	add	r30, r24
     f6c:	f9 1f       	adc	r31, r25
     f6e:	20 81       	ld	r18, Z
     f70:	32 17       	cp	r19, r18
     f72:	81 f0       	breq	.+32     	; 0xf94 <priv_voidCheckPassword+0x8c>
				local_u8WrongPasswordCounter++;
     f74:	d3 94       	inc	r13
				local_boolRightPassword = false;
				UART_voidTxString("Wrong password, try again\r\n");
     f76:	88 e1       	ldi	r24, 0x18	; 24
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	87 ea       	ldi	r24, 0xA7	; 167
     f82:	91 e6       	ldi	r25, 0x61	; 97
     f84:	21 50       	subi	r18, 0x01	; 1
     f86:	80 40       	sbci	r24, 0x00	; 0
     f88:	90 40       	sbci	r25, 0x00	; 0
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <priv_voidCheckPassword+0x7c>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <priv_voidCheckPassword+0x86>
     f8e:	00 00       	nop
		
		//check input password
		for(int i = 0;i<PASSWORD_LENGTH;++i){
			if(local_u8InputPassword[i] != copy_pu8UserPassword[i]){
				local_u8WrongPasswordCounter++;
				local_boolRightPassword = false;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <priv_voidCheckPassword+0x96>
			UART_voidRxChar(&local_u8InputPassword[i]);
		}
		UART_voidTxString("\r\n");//new line
		
		//check input password
		for(int i = 0;i<PASSWORD_LENGTH;++i){
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	84 30       	cpi	r24, 0x04	; 4
     f98:	91 05       	cpc	r25, r1
     f9a:	fc f2       	brlt	.-66     	; 0xf5a <priv_voidCheckPassword+0x52>
void priv_voidCheckPassword(u8* copy_pu8UserPassword){
	u8 local_u8WrongPasswordCounter = 0;
	u8 local_u8InputPassword[PASSWORD_LENGTH];
	//loop to get input password and check if the input password is correct
	while(local_u8WrongPasswordCounter < MAX_NUMBER_OF_WRONG_ATTEMPTS){
		bool local_boolRightPassword    = true;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
				break;
			}
		}
		
		//if right password, terminate function
		if(local_boolRightPassword) return;
     f9e:	81 11       	cpse	r24, r1
     fa0:	0a c0       	rjmp	.+20     	; 0xfb6 <priv_voidCheckPassword+0xae>

void priv_voidCheckPassword(u8* copy_pu8UserPassword){
	u8 local_u8WrongPasswordCounter = 0;
	u8 local_u8InputPassword[PASSWORD_LENGTH];
	//loop to get input password and check if the input password is correct
	while(local_u8WrongPasswordCounter < MAX_NUMBER_OF_WRONG_ATTEMPTS){
     fa2:	22 e0       	ldi	r18, 0x02	; 2
     fa4:	2d 15       	cp	r18, r13
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <priv_voidCheckPassword+0xa2>
     fa8:	bd cf       	rjmp	.-134    	; 0xf24 <priv_voidCheckPassword+0x1c>
		//if right password, terminate function
		if(local_boolRightPassword) return;
	}
	
	//if we break due to wrong attempts, lock system
		UART_voidTxString("Wrong input limit reached. System locked.\r\n");
     faa:	84 e3       	ldi	r24, 0x34	; 52
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		priv_voidLockSystem();
     fb2:	0e 94 83 07 	call	0xf06	; 0xf06 <priv_voidLockSystem>
		
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	08 95       	ret

00000fce <priv_voidDoorControl>:
	}
}
void priv_voidLockSystem(){
	while(1){}
}
void priv_voidDoorControl(){
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	1f 92       	push	r1
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	UART_voidTxChar('\f');//clear display
     fd8:	8c e0       	ldi	r24, 0x0C	; 12
     fda:	0e 94 8e 0b 	call	0x171c	; 0x171c <UART_voidTxChar>
	u8 local_u8Choice;
	UART_voidTxString("1)open door 2)close door\r\n");
     fde:	80 e6       	ldi	r24, 0x60	; 96
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	UART_voidRxChar(&local_u8Choice);
     fe6:	ce 01       	movw	r24, r28
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
	switch(local_u8Choice){
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	81 33       	cpi	r24, 0x31	; 49
     ff2:	19 f0       	breq	.+6      	; 0xffa <priv_voidDoorControl+0x2c>
     ff4:	82 33       	cpi	r24, 0x32	; 50
     ff6:	51 f0       	breq	.+20     	; 0x100c <priv_voidDoorControl+0x3e>
     ff8:	11 c0       	rjmp	.+34     	; 0x101c <priv_voidDoorControl+0x4e>
		case '1':
		PWM1_voidStart(10,50);
     ffa:	42 e3       	ldi	r20, 0x32	; 50
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	91 e4       	ldi	r25, 0x41	; 65
    1006:	0e 94 ad 05 	call	0xb5a	; 0xb5a <PWM1_voidStart>
		break;
    100a:	08 c0       	rjmp	.+16     	; 0x101c <priv_voidDoorControl+0x4e>
		case '2':
		PWM1_voidStart(7.5,50);
    100c:	42 e3       	ldi	r20, 0x32	; 50
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	80 ef       	ldi	r24, 0xF0	; 240
    1016:	90 e4       	ldi	r25, 0x40	; 64
    1018:	0e 94 ad 05 	call	0xb5a	; 0xb5a <PWM1_voidStart>
		break;
	}
}
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <priv_voidLightSystem>:
void priv_voidLightSystem(){
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	1f 92       	push	r1
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	UART_voidTxChar('\f');//clear display
    102e:	8c e0       	ldi	r24, 0x0C	; 12
    1030:	0e 94 8e 0b 	call	0x171c	; 0x171c <UART_voidTxChar>
	u8 local_u8Choice;
	UART_voidTxString("1)lamp1 2)lamp2\r\n");
    1034:	8b e7       	ldi	r24, 0x7B	; 123
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	UART_voidTxString("3)lamp3 4)lamp4\r\n");
    103c:	8d e8       	ldi	r24, 0x8D	; 141
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	
	UART_voidRxChar(&local_u8Choice);
    1044:	ce 01       	movw	r24, r28
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
	UART_voidTxString("\r\n");//new line
    104c:	85 e0       	ldi	r24, 0x05	; 5
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	UART_voidTxString("1)on 2)off\r\n");
    1054:	8f e9       	ldi	r24, 0x9F	; 159
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	switch(local_u8Choice){
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	82 33       	cpi	r24, 0x32	; 50
    1060:	21 f1       	breq	.+72     	; 0x10aa <priv_voidLightSystem+0x86>
    1062:	18 f4       	brcc	.+6      	; 0x106a <priv_voidLightSystem+0x46>
    1064:	81 33       	cpi	r24, 0x31	; 49
    1066:	39 f0       	breq	.+14     	; 0x1076 <priv_voidLightSystem+0x52>
    1068:	6d c0       	rjmp	.+218    	; 0x1144 <priv_voidLightSystem+0x120>
    106a:	83 33       	cpi	r24, 0x33	; 51
    106c:	c1 f1       	breq	.+112    	; 0x10de <priv_voidLightSystem+0xba>
    106e:	84 33       	cpi	r24, 0x34	; 52
    1070:	09 f4       	brne	.+2      	; 0x1074 <priv_voidLightSystem+0x50>
    1072:	4f c0       	rjmp	.+158    	; 0x1112 <priv_voidLightSystem+0xee>
    1074:	67 c0       	rjmp	.+206    	; 0x1144 <priv_voidLightSystem+0x120>
		case '1':
		UART_voidRxChar(&local_u8Choice);
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
		UART_voidTxString("\r\n");//new line
    107e:	85 e0       	ldi	r24, 0x05	; 5
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		switch(local_u8Choice){
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	81 33       	cpi	r24, 0x31	; 49
    108a:	19 f0       	breq	.+6      	; 0x1092 <priv_voidLightSystem+0x6e>
    108c:	82 33       	cpi	r24, 0x32	; 50
    108e:	39 f0       	breq	.+14     	; 0x109e <priv_voidLightSystem+0x7a>
    1090:	59 c0       	rjmp	.+178    	; 0x1144 <priv_voidLightSystem+0x120>
			case '1':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	62 e0       	ldi	r22, 0x02	; 2
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    109c:	53 c0       	rjmp	.+166    	; 0x1144 <priv_voidLightSystem+0x120>
			case '2':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_LOW);
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	62 e0       	ldi	r22, 0x02	; 2
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    10a8:	4d c0       	rjmp	.+154    	; 0x1144 <priv_voidLightSystem+0x120>
		}
		break;
		case '2':
		UART_voidRxChar(&local_u8Choice);
    10aa:	ce 01       	movw	r24, r28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
		UART_voidTxString("\r\n");//new line
    10b2:	85 e0       	ldi	r24, 0x05	; 5
    10b4:	91 e0       	ldi	r25, 0x01	; 1
    10b6:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		switch(local_u8Choice){
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	81 33       	cpi	r24, 0x31	; 49
    10be:	19 f0       	breq	.+6      	; 0x10c6 <priv_voidLightSystem+0xa2>
    10c0:	82 33       	cpi	r24, 0x32	; 50
    10c2:	39 f0       	breq	.+14     	; 0x10d2 <priv_voidLightSystem+0xae>
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <priv_voidLightSystem+0x120>
			case '1':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    10c6:	41 e0       	ldi	r20, 0x01	; 1
    10c8:	63 e0       	ldi	r22, 0x03	; 3
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    10d0:	39 c0       	rjmp	.+114    	; 0x1144 <priv_voidLightSystem+0x120>
			case '2':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	63 e0       	ldi	r22, 0x03	; 3
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    10dc:	33 c0       	rjmp	.+102    	; 0x1144 <priv_voidLightSystem+0x120>
		}
		break;
		case '3':
		UART_voidRxChar(&local_u8Choice);
    10de:	ce 01       	movw	r24, r28
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
		UART_voidTxString("\r\n");//new line
    10e6:	85 e0       	ldi	r24, 0x05	; 5
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		switch(local_u8Choice){
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	81 33       	cpi	r24, 0x31	; 49
    10f2:	19 f0       	breq	.+6      	; 0x10fa <priv_voidLightSystem+0xd6>
    10f4:	82 33       	cpi	r24, 0x32	; 50
    10f6:	39 f0       	breq	.+14     	; 0x1106 <priv_voidLightSystem+0xe2>
    10f8:	25 c0       	rjmp	.+74     	; 0x1144 <priv_voidLightSystem+0x120>
			case '1':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN4,DIO_HIGH);
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	64 e0       	ldi	r22, 0x04	; 4
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    1104:	1f c0       	rjmp	.+62     	; 0x1144 <priv_voidLightSystem+0x120>
			case '2':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN4,DIO_LOW);
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	64 e0       	ldi	r22, 0x04	; 4
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    1110:	19 c0       	rjmp	.+50     	; 0x1144 <priv_voidLightSystem+0x120>
		}
		break;
		case '4':
		UART_voidRxChar(&local_u8Choice);
    1112:	ce 01       	movw	r24, r28
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
		UART_voidTxString("\r\n");//new line
    111a:	85 e0       	ldi	r24, 0x05	; 5
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		switch(local_u8Choice){
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	81 33       	cpi	r24, 0x31	; 49
    1126:	19 f0       	breq	.+6      	; 0x112e <priv_voidLightSystem+0x10a>
    1128:	82 33       	cpi	r24, 0x32	; 50
    112a:	39 f0       	breq	.+14     	; 0x113a <priv_voidLightSystem+0x116>
    112c:	0b c0       	rjmp	.+22     	; 0x1144 <priv_voidLightSystem+0x120>
			case '1':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN5,DIO_HIGH);
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	65 e0       	ldi	r22, 0x05	; 5
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    1138:	05 c0       	rjmp	.+10     	; 0x1144 <priv_voidLightSystem+0x120>
			case '2':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN5,DIO_LOW);
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	65 e0       	ldi	r22, 0x05	; 5
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
		}
		break;
	}
}
    1144:	0f 90       	pop	r0
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <priv_voidAdminPage>:
	//if we break due to wrong attempts, lock system
		UART_voidTxString("Wrong input limit reached. System locked.\r\n");
		priv_voidLockSystem();
		
}
void priv_voidAdminPage(){
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	1f 92       	push	r1
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Choice;
	while(1){
		UART_voidTxChar('\f');//clear display
    1156:	8c e0       	ldi	r24, 0x0C	; 12
    1158:	0e 94 8e 0b 	call	0x171c	; 0x171c <UART_voidTxChar>
		UART_voidTxString("1)add user 2)door 3)lights 4)exit\r\n");
    115c:	8c ea       	ldi	r24, 0xAC	; 172
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		UART_voidRxChar(&local_u8Choice);
    1164:	ce 01       	movw	r24, r28
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
		UART_voidTxString("\r\n");//new line
    116c:	85 e0       	ldi	r24, 0x05	; 5
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		switch(local_u8Choice){
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	82 33       	cpi	r24, 0x32	; 50
    1178:	61 f0       	breq	.+24     	; 0x1192 <priv_voidAdminPage+0x46>
    117a:	18 f4       	brcc	.+6      	; 0x1182 <priv_voidAdminPage+0x36>
    117c:	81 33       	cpi	r24, 0x31	; 49
    117e:	31 f0       	breq	.+12     	; 0x118c <priv_voidAdminPage+0x40>
    1180:	ea cf       	rjmp	.-44     	; 0x1156 <priv_voidAdminPage+0xa>
    1182:	83 33       	cpi	r24, 0x33	; 51
    1184:	49 f0       	breq	.+18     	; 0x1198 <priv_voidAdminPage+0x4c>
    1186:	84 33       	cpi	r24, 0x34	; 52
    1188:	51 f0       	breq	.+20     	; 0x119e <priv_voidAdminPage+0x52>
    118a:	e5 cf       	rjmp	.-54     	; 0x1156 <priv_voidAdminPage+0xa>
			case '1':
			priv_voidAddUser();
    118c:	0e 94 a8 06 	call	0xd50	; 0xd50 <priv_voidAddUser>
			break;
    1190:	e2 cf       	rjmp	.-60     	; 0x1156 <priv_voidAdminPage+0xa>
			case '2':
			priv_voidDoorControl();
    1192:	0e 94 e7 07 	call	0xfce	; 0xfce <priv_voidDoorControl>
			break;
    1196:	df cf       	rjmp	.-66     	; 0x1156 <priv_voidAdminPage+0xa>
			case '3':
			priv_voidLightSystem();
    1198:	0e 94 12 08 	call	0x1024	; 0x1024 <priv_voidLightSystem>
			break;
    119c:	dc cf       	rjmp	.-72     	; 0x1156 <priv_voidAdminPage+0xa>
			case '4':
			return;
		}
	}
}
    119e:	0f 90       	pop	r0
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <priv_voidAdminLogin>:
	
	priv_voidUserPage();
}


void priv_voidAdminLogin(){
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <priv_voidAdminLogin+0x6>
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <priv_voidAdminLogin+0x8>
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8AdminPassword [PASSWORD_LENGTH]= ADMIN_PASSWORD;
    11b2:	81 e3       	ldi	r24, 0x31	; 49
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	82 e3       	ldi	r24, 0x32	; 50
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	83 e3       	ldi	r24, 0x33	; 51
    11bc:	8b 83       	std	Y+3, r24	; 0x03
    11be:	84 e3       	ldi	r24, 0x34	; 52
    11c0:	8c 83       	std	Y+4, r24	; 0x04
	priv_voidCheckPassword(local_u8AdminPassword);
    11c2:	ce 01       	movw	r24, r28
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	0e 94 84 07 	call	0xf08	; 0xf08 <priv_voidCheckPassword>
	priv_voidAdminPage();
    11ca:	0e 94 a6 08 	call	0x114c	; 0x114c <priv_voidAdminPage>
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <priv_voidUserPage>:
			case '4':
			return;
		}
	}
}
void priv_voidUserPage(){
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	1f 92       	push	r1
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Choice;
	while(1){
		UART_voidTxString("1)lights 2)exit\r\n");
    11e6:	80 ed       	ldi	r24, 0xD0	; 208
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		UART_voidRxChar(&local_u8Choice);
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
		UART_voidTxString("\r\n");//new line
    11f6:	85 e0       	ldi	r24, 0x05	; 5
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		switch(local_u8Choice){
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	81 33       	cpi	r24, 0x31	; 49
    1202:	19 f0       	breq	.+6      	; 0x120a <priv_voidUserPage+0x2e>
    1204:	82 33       	cpi	r24, 0x32	; 50
    1206:	21 f0       	breq	.+8      	; 0x1210 <priv_voidUserPage+0x34>
    1208:	ee cf       	rjmp	.-36     	; 0x11e6 <priv_voidUserPage+0xa>
			case '1':
			priv_voidLightSystem();
    120a:	0e 94 12 08 	call	0x1024	; 0x1024 <priv_voidLightSystem>
			break;
    120e:	eb cf       	rjmp	.-42     	; 0x11e6 <priv_voidUserPage+0xa>
			case '2':
			return;
			break;
		}
	}
}
    1210:	0f 90       	pop	r0
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <priv_voidUserLogin>:
	UART_voidTxString("User added!\r\n");
}



void priv_voidUserLogin(){
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	27 97       	sbiw	r28, 0x07	; 7
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8StoredUserId;
	bool userIdFound = false;
	u8 local_u8userAddress;
	
	//get number of users
	EEPROM_voidReadByte(USER_COUNTER_ADDRESSS,&local_u8NumberOfUsers);
    1234:	be 01       	movw	r22, r28
    1236:	6f 5f       	subi	r22, 0xFF	; 255
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <EEPROM_voidReadByte>
	
	//if there's no users return
	if(local_u8NumberOfUsers == 0){
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	81 11       	cpse	r24, r1
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <priv_voidUserLogin+0x4c>
		UART_voidTxString("Add users First!\r\n");
    1248:	82 ee       	ldi	r24, 0xE2	; 226
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
    1250:	2f ef       	ldi	r18, 0xFF	; 255
    1252:	87 ea       	ldi	r24, 0xA7	; 167
    1254:	91 e6       	ldi	r25, 0x61	; 97
    1256:	21 50       	subi	r18, 0x01	; 1
    1258:	80 40       	sbci	r24, 0x00	; 0
    125a:	90 40       	sbci	r25, 0x00	; 0
    125c:	e1 f7       	brne	.-8      	; 0x1256 <priv_voidUserLogin+0x3e>
    125e:	00 c0       	rjmp	.+0      	; 0x1260 <priv_voidUserLogin+0x48>
    1260:	00 00       	nop
    1262:	67 c0       	rjmp	.+206    	; 0x1332 <priv_voidUserLogin+0x11a>
		_delay_ms(2000);
		return;
	}
	
	//get user id
	UART_voidTxString("enter user ID:");
    1264:	85 ef       	ldi	r24, 0xF5	; 245
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	for(int i=0;i<USER_ID_SIZE;++i){
    126c:	00 e0       	ldi	r16, 0x00	; 0
    126e:	10 e0       	ldi	r17, 0x00	; 0

void priv_voidUserLogin(){
	u8 local_u8NumberOfUsers;
	u8 local_u8UserPassword[PASSWORD_LENGTH];
	u8 local_u8userIdDigit;
	u8 local_u8EnteredUserId = 0;
    1270:	f1 2c       	mov	r15, r1
		return;
	}
	
	//get user id
	UART_voidTxString("enter user ID:");
	for(int i=0;i<USER_ID_SIZE;++i){
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <priv_voidUserLogin+0x7a>
		local_u8EnteredUserId*= 10;
    1274:	ff 0c       	add	r15, r15
    1276:	8f 2d       	mov	r24, r15
    1278:	88 0f       	add	r24, r24
    127a:	88 0f       	add	r24, r24
    127c:	f8 0e       	add	r15, r24
		UART_voidRxChar(&local_u8userIdDigit);
    127e:	ce 01       	movw	r24, r28
    1280:	06 96       	adiw	r24, 0x06	; 6
    1282:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
		local_u8userIdDigit -= '0';
    1286:	8e 81       	ldd	r24, Y+6	; 0x06
    1288:	80 53       	subi	r24, 0x30	; 48
    128a:	8e 83       	std	Y+6, r24	; 0x06
		local_u8EnteredUserId += local_u8userIdDigit;
    128c:	f8 0e       	add	r15, r24
		return;
	}
	
	//get user id
	UART_voidTxString("enter user ID:");
	for(int i=0;i<USER_ID_SIZE;++i){
    128e:	0f 5f       	subi	r16, 0xFF	; 255
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	03 30       	cpi	r16, 0x03	; 3
    1294:	11 05       	cpc	r17, r1
    1296:	74 f3       	brlt	.-36     	; 0x1274 <priv_voidUserLogin+0x5c>
		local_u8EnteredUserId*= 10;
		UART_voidRxChar(&local_u8userIdDigit);
		local_u8userIdDigit -= '0';
		local_u8EnteredUserId += local_u8userIdDigit;
	}
	UART_voidTxString("\r\n");//new line
    1298:	85 e0       	ldi	r24, 0x05	; 5
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	
	//check if this user id exists
	for(int i = 0;i<local_u8NumberOfUsers*(PASSWORD_LENGTH+1);i += PASSWORD_LENGTH+1){
    12a0:	00 e0       	ldi	r16, 0x00	; 0
    12a2:	10 e0       	ldi	r17, 0x00	; 0
    12a4:	0e c0       	rjmp	.+28     	; 0x12c2 <priv_voidUserLogin+0xaa>
		EEPROM_voidReadByte(i,&local_u8StoredUserId);
    12a6:	be 01       	movw	r22, r28
    12a8:	69 5f       	subi	r22, 0xF9	; 249
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	c8 01       	movw	r24, r16
    12ae:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <EEPROM_voidReadByte>
		if(local_u8StoredUserId == local_u8EnteredUserId){
    12b2:	8f 81       	ldd	r24, Y+7	; 0x07
    12b4:	f8 12       	cpse	r15, r24
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <priv_voidUserLogin+0xa6>
			userIdFound = true;
			local_u8userAddress = i;
    12b8:	e0 2e       	mov	r14, r16
	
	//check if this user id exists
	for(int i = 0;i<local_u8NumberOfUsers*(PASSWORD_LENGTH+1);i += PASSWORD_LENGTH+1){
		EEPROM_voidReadByte(i,&local_u8StoredUserId);
		if(local_u8StoredUserId == local_u8EnteredUserId){
			userIdFound = true;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
			local_u8userAddress = i;
			break;
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <priv_voidUserLogin+0xc4>
		local_u8EnteredUserId += local_u8userIdDigit;
	}
	UART_voidTxString("\r\n");//new line
	
	//check if this user id exists
	for(int i = 0;i<local_u8NumberOfUsers*(PASSWORD_LENGTH+1);i += PASSWORD_LENGTH+1){
    12be:	0b 5f       	subi	r16, 0xFB	; 251
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9c 01       	movw	r18, r24
    12c8:	22 0f       	add	r18, r18
    12ca:	33 1f       	adc	r19, r19
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	82 0f       	add	r24, r18
    12d2:	93 1f       	adc	r25, r19
    12d4:	08 17       	cp	r16, r24
    12d6:	19 07       	cpc	r17, r25
    12d8:	34 f3       	brlt	.-52     	; 0x12a6 <priv_voidUserLogin+0x8e>
	u8 local_u8NumberOfUsers;
	u8 local_u8UserPassword[PASSWORD_LENGTH];
	u8 local_u8userIdDigit;
	u8 local_u8EnteredUserId = 0;
	u8 local_u8StoredUserId;
	bool userIdFound = false;
    12da:	80 e0       	ldi	r24, 0x00	; 0
			local_u8userAddress = i;
			break;
		}	
	}
	
	if(!userIdFound){
    12dc:	81 11       	cpse	r24, r1
    12de:	1e c0       	rjmp	.+60     	; 0x131c <priv_voidUserLogin+0x104>
		UART_voidTxString("user id not found\r\n");
    12e0:	84 e0       	ldi	r24, 0x04	; 4
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
    12e8:	2f ef       	ldi	r18, 0xFF	; 255
    12ea:	87 ea       	ldi	r24, 0xA7	; 167
    12ec:	91 e6       	ldi	r25, 0x61	; 97
    12ee:	21 50       	subi	r18, 0x01	; 1
    12f0:	80 40       	sbci	r24, 0x00	; 0
    12f2:	90 40       	sbci	r25, 0x00	; 0
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <priv_voidUserLogin+0xd6>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <priv_voidUserLogin+0xe0>
    12f8:	00 00       	nop
    12fa:	1b c0       	rjmp	.+54     	; 0x1332 <priv_voidUserLogin+0x11a>
		return;
	}
	
	//get user password form memory
	for(int i = 0;i<PASSWORD_LENGTH;++i){
		EEPROM_voidReadByte(local_u8userAddress+1+i,&local_u8UserPassword[i]);
    12fc:	8e 2d       	mov	r24, r14
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	62 e0       	ldi	r22, 0x02	; 2
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	6c 0f       	add	r22, r28
    1308:	7d 1f       	adc	r23, r29
    130a:	60 0f       	add	r22, r16
    130c:	71 1f       	adc	r23, r17
    130e:	80 0f       	add	r24, r16
    1310:	91 1f       	adc	r25, r17
    1312:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <EEPROM_voidReadByte>
		_delay_ms(2000);
		return;
	}
	
	//get user password form memory
	for(int i = 0;i<PASSWORD_LENGTH;++i){
    1316:	0f 5f       	subi	r16, 0xFF	; 255
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <priv_voidUserLogin+0x108>
    131c:	00 e0       	ldi	r16, 0x00	; 0
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	04 30       	cpi	r16, 0x04	; 4
    1322:	11 05       	cpc	r17, r1
    1324:	5c f3       	brlt	.-42     	; 0x12fc <priv_voidUserLogin+0xe4>
		EEPROM_voidReadByte(local_u8userAddress+1+i,&local_u8UserPassword[i]);
	}
	
	//check password
	priv_voidCheckPassword(local_u8UserPassword);
    1326:	ce 01       	movw	r24, r28
    1328:	02 96       	adiw	r24, 0x02	; 2
    132a:	0e 94 84 07 	call	0xf08	; 0xf08 <priv_voidCheckPassword>
	
	priv_voidUserPage();
    132e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <priv_voidUserPage>
}
    1332:	27 96       	adiw	r28, 0x07	; 7
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	08 95       	ret

0000134c <SmartHome_voidTerminalLoginMainMenu>:
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_OUTPUT);
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN3,DIO_OUTPUT);
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN4,DIO_OUTPUT);
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN5,DIO_OUTPUT);
}
void SmartHome_voidTerminalLoginMainMenu(){
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	1f 92       	push	r1
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Choice;
	UART_voidTxChar('\f');//clear display
    1356:	8c e0       	ldi	r24, 0x0C	; 12
    1358:	0e 94 8e 0b 	call	0x171c	; 0x171c <UART_voidTxChar>
	UART_voidTxString("Main Login Page\r\n");
    135c:	88 e1       	ldi	r24, 0x18	; 24
    135e:	92 e0       	ldi	r25, 0x02	; 2
    1360:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	UART_voidTxString("1)Admin login   2)User login\r\n");
    1364:	8a e2       	ldi	r24, 0x2A	; 42
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	UART_voidRxChar(&local_u8Choice);
    136c:	ce 01       	movw	r24, r28
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	0e 94 92 0b 	call	0x1724	; 0x1724 <UART_voidRxChar>
	UART_voidTxString("\r\n");//new line
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
	switch(local_u8Choice){
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	81 33       	cpi	r24, 0x31	; 49
    1380:	19 f0       	breq	.+6      	; 0x1388 <SmartHome_voidTerminalLoginMainMenu+0x3c>
    1382:	82 33       	cpi	r24, 0x32	; 50
    1384:	59 f0       	breq	.+22     	; 0x139c <SmartHome_voidTerminalLoginMainMenu+0x50>
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <SmartHome_voidTerminalLoginMainMenu+0x64>
		case '1':
		UART_voidTxChar('\f');//clear display
    1388:	8c e0       	ldi	r24, 0x0C	; 12
    138a:	0e 94 8e 0b 	call	0x171c	; 0x171c <UART_voidTxChar>
		UART_voidTxString("Admin login\r\n");
    138e:	89 e4       	ldi	r24, 0x49	; 73
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		priv_voidAdminLogin();
    1396:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <priv_voidAdminLogin>
		break;
    139a:	17 c0       	rjmp	.+46     	; 0x13ca <SmartHome_voidTerminalLoginMainMenu+0x7e>
		case '2':
		UART_voidTxChar('\f');//clear display
    139c:	8c e0       	ldi	r24, 0x0C	; 12
    139e:	0e 94 8e 0b 	call	0x171c	; 0x171c <UART_voidTxChar>
		UART_voidTxString("user login\r\n");
    13a2:	87 e5       	ldi	r24, 0x57	; 87
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
		priv_voidUserLogin();
    13aa:	0e 94 0c 09 	call	0x1218	; 0x1218 <priv_voidUserLogin>
		break;
    13ae:	0d c0       	rjmp	.+26     	; 0x13ca <SmartHome_voidTerminalLoginMainMenu+0x7e>
		default:
			UART_voidTxString("invalid choice!\r\n");
    13b0:	84 e6       	ldi	r24, 0x64	; 100
    13b2:	92 e0       	ldi	r25, 0x02	; 2
    13b4:	0e 94 98 0b 	call	0x1730	; 0x1730 <UART_voidTxString>
    13b8:	2f ef       	ldi	r18, 0xFF	; 255
    13ba:	87 ea       	ldi	r24, 0xA7	; 167
    13bc:	91 e6       	ldi	r25, 0x61	; 97
    13be:	21 50       	subi	r18, 0x01	; 1
    13c0:	80 40       	sbci	r24, 0x00	; 0
    13c2:	90 40       	sbci	r25, 0x00	; 0
    13c4:	e1 f7       	brne	.-8      	; 0x13be <SmartHome_voidTerminalLoginMainMenu+0x72>
    13c6:	00 c0       	rjmp	.+0      	; 0x13c8 <SmartHome_voidTerminalLoginMainMenu+0x7c>
    13c8:	00 00       	nop
			_delay_ms(2000);
		}
}
    13ca:	0f 90       	pop	r0
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <priv_voidLCDLightSystemControl>:
	}
	}
}


void priv_voidLCDLightSystemControl(){
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	1f 92       	push	r1
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Choice = KEY_NOT_PRESSED;
    13dc:	19 82       	std	Y+1, r1	; 0x01
	
	LCD_voidClearDisplay();
    13de:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_voidClearDisplay>
	LCD_voidDisplayString("1)lamp1 2)lamp2\r\n");
    13e2:	8b e7       	ldi	r24, 0x7B	; 123
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_voidDisplayString>
	LCD_voidMoveToSecondLine();
    13ea:	0e 94 28 05 	call	0xa50	; 0xa50 <LCD_voidMoveToSecondLine>
	LCD_voidDisplayString("3)lamp3 4)lamp4\r\n");
    13ee:	8d e8       	ldi	r24, 0x8D	; 141
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_voidDisplayString>
	
	while(local_u8Choice == KEY_NOT_PRESSED){
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <priv_voidLCDLightSystemControl+0x2e>
		KEYPAD_voidGetPressedKey(&local_u8Choice);
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_voidGetPressedKey>
	LCD_voidClearDisplay();
	LCD_voidDisplayString("1)lamp1 2)lamp2\r\n");
	LCD_voidMoveToSecondLine();
	LCD_voidDisplayString("3)lamp3 4)lamp4\r\n");
	
	while(local_u8Choice == KEY_NOT_PRESSED){
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	88 23       	and	r24, r24
    1404:	c9 f3       	breq	.-14     	; 0x13f8 <priv_voidLCDLightSystemControl+0x26>
		KEYPAD_voidGetPressedKey(&local_u8Choice);
	}
	LCD_voidClearDisplay();
    1406:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_voidClearDisplay>
	LCD_voidDisplayString("1)on 2)off\r\n");
    140a:	8f e9       	ldi	r24, 0x9F	; 159
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_voidDisplayString>
	switch(local_u8Choice){
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	82 33       	cpi	r24, 0x32	; 50
    1416:	21 f1       	breq	.+72     	; 0x1460 <priv_voidLCDLightSystemControl+0x8e>
    1418:	18 f4       	brcc	.+6      	; 0x1420 <priv_voidLCDLightSystemControl+0x4e>
    141a:	81 33       	cpi	r24, 0x31	; 49
    141c:	39 f0       	breq	.+14     	; 0x142c <priv_voidLCDLightSystemControl+0x5a>
    141e:	6d c0       	rjmp	.+218    	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
    1420:	83 33       	cpi	r24, 0x33	; 51
    1422:	c1 f1       	breq	.+112    	; 0x1494 <priv_voidLCDLightSystemControl+0xc2>
    1424:	84 33       	cpi	r24, 0x34	; 52
    1426:	09 f4       	brne	.+2      	; 0x142a <priv_voidLCDLightSystemControl+0x58>
    1428:	4f c0       	rjmp	.+158    	; 0x14c8 <priv_voidLCDLightSystemControl+0xf6>
    142a:	67 c0       	rjmp	.+206    	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
		case '1':
		local_u8Choice = KEY_NOT_PRESSED;
    142c:	19 82       	std	Y+1, r1	; 0x01
		while(local_u8Choice == KEY_NOT_PRESSED){
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <priv_voidLCDLightSystemControl+0x66>
			KEYPAD_voidGetPressedKey(&local_u8Choice);
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_voidGetPressedKey>
	LCD_voidClearDisplay();
	LCD_voidDisplayString("1)on 2)off\r\n");
	switch(local_u8Choice){
		case '1':
		local_u8Choice = KEY_NOT_PRESSED;
		while(local_u8Choice == KEY_NOT_PRESSED){
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	88 23       	and	r24, r24
    143c:	c9 f3       	breq	.-14     	; 0x1430 <priv_voidLCDLightSystemControl+0x5e>
			KEYPAD_voidGetPressedKey(&local_u8Choice);
		}
		switch(local_u8Choice){
    143e:	81 33       	cpi	r24, 0x31	; 49
    1440:	19 f0       	breq	.+6      	; 0x1448 <priv_voidLCDLightSystemControl+0x76>
    1442:	82 33       	cpi	r24, 0x32	; 50
    1444:	39 f0       	breq	.+14     	; 0x1454 <priv_voidLCDLightSystemControl+0x82>
    1446:	59 c0       	rjmp	.+178    	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
			case '1':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_HIGH);
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    1452:	53 c0       	rjmp	.+166    	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
			case '2':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_LOW);
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	62 e0       	ldi	r22, 0x02	; 2
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    145e:	4d c0       	rjmp	.+154    	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
		}
		break;
		case '2':
		local_u8Choice = KEY_NOT_PRESSED;
    1460:	19 82       	std	Y+1, r1	; 0x01
		while(local_u8Choice == KEY_NOT_PRESSED){
    1462:	04 c0       	rjmp	.+8      	; 0x146c <priv_voidLCDLightSystemControl+0x9a>
			KEYPAD_voidGetPressedKey(&local_u8Choice);
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_voidGetPressedKey>
			break;
		}
		break;
		case '2':
		local_u8Choice = KEY_NOT_PRESSED;
		while(local_u8Choice == KEY_NOT_PRESSED){
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	88 23       	and	r24, r24
    1470:	c9 f3       	breq	.-14     	; 0x1464 <priv_voidLCDLightSystemControl+0x92>
			KEYPAD_voidGetPressedKey(&local_u8Choice);
		}
		switch(local_u8Choice){
    1472:	81 33       	cpi	r24, 0x31	; 49
    1474:	19 f0       	breq	.+6      	; 0x147c <priv_voidLCDLightSystemControl+0xaa>
    1476:	82 33       	cpi	r24, 0x32	; 50
    1478:	39 f0       	breq	.+14     	; 0x1488 <priv_voidLCDLightSystemControl+0xb6>
    147a:	3f c0       	rjmp	.+126    	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
			case '1':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	63 e0       	ldi	r22, 0x03	; 3
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    1486:	39 c0       	rjmp	.+114    	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
			case '2':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_LOW);
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	63 e0       	ldi	r22, 0x03	; 3
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    1492:	33 c0       	rjmp	.+102    	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
		}
		break;
		case '3':
		local_u8Choice = KEY_NOT_PRESSED;
    1494:	19 82       	std	Y+1, r1	; 0x01
		while(local_u8Choice == KEY_NOT_PRESSED){
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <priv_voidLCDLightSystemControl+0xce>
			KEYPAD_voidGetPressedKey(&local_u8Choice);
    1498:	ce 01       	movw	r24, r28
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_voidGetPressedKey>
			break;
		}
		break;
		case '3':
		local_u8Choice = KEY_NOT_PRESSED;
		while(local_u8Choice == KEY_NOT_PRESSED){
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	88 23       	and	r24, r24
    14a4:	c9 f3       	breq	.-14     	; 0x1498 <priv_voidLCDLightSystemControl+0xc6>
			KEYPAD_voidGetPressedKey(&local_u8Choice);
		}
		switch(local_u8Choice){
    14a6:	81 33       	cpi	r24, 0x31	; 49
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <priv_voidLCDLightSystemControl+0xde>
    14aa:	82 33       	cpi	r24, 0x32	; 50
    14ac:	39 f0       	breq	.+14     	; 0x14bc <priv_voidLCDLightSystemControl+0xea>
    14ae:	25 c0       	rjmp	.+74     	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
			case '1':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN4,DIO_HIGH);
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	64 e0       	ldi	r22, 0x04	; 4
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    14ba:	1f c0       	rjmp	.+62     	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
			case '2':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN4,DIO_LOW);
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	64 e0       	ldi	r22, 0x04	; 4
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    14c6:	19 c0       	rjmp	.+50     	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
		}
		break;
		case '4':
		local_u8Choice = KEY_NOT_PRESSED;
    14c8:	19 82       	std	Y+1, r1	; 0x01
		while(local_u8Choice == KEY_NOT_PRESSED){
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <priv_voidLCDLightSystemControl+0x102>
			KEYPAD_voidGetPressedKey(&local_u8Choice);
    14cc:	ce 01       	movw	r24, r28
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_voidGetPressedKey>
			break;
		}
		break;
		case '4':
		local_u8Choice = KEY_NOT_PRESSED;
		while(local_u8Choice == KEY_NOT_PRESSED){
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	88 23       	and	r24, r24
    14d8:	c9 f3       	breq	.-14     	; 0x14cc <priv_voidLCDLightSystemControl+0xfa>
			KEYPAD_voidGetPressedKey(&local_u8Choice);
		}
		switch(local_u8Choice){
    14da:	81 33       	cpi	r24, 0x31	; 49
    14dc:	19 f0       	breq	.+6      	; 0x14e4 <priv_voidLCDLightSystemControl+0x112>
    14de:	82 33       	cpi	r24, 0x32	; 50
    14e0:	39 f0       	breq	.+14     	; 0x14f0 <priv_voidLCDLightSystemControl+0x11e>
    14e2:	0b c0       	rjmp	.+22     	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
			case '1':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN5,DIO_HIGH);
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	65 e0       	ldi	r22, 0x05	; 5
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
    14ee:	05 c0       	rjmp	.+10     	; 0x14fa <priv_voidLCDLightSystemControl+0x128>
			case '2':
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN5,DIO_LOW);
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	65 e0       	ldi	r22, 0x05	; 5
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetPinValue>
			break;
		}
		break;
	}
}
    14fa:	0f 90       	pop	r0
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <priv_LCDcontrolMainTerminal>:
		DIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
		PWM2_voidStop();
	}
}

void priv_LCDcontrolMainTerminal(){
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
	bool validChoice = false;
    150e:	10 e0       	ldi	r17, 0x00	; 0
	while(!validChoice){
    1510:	26 c0       	rjmp	.+76     	; 0x155e <priv_LCDcontrolMainTerminal+0x5c>
	LCD_voidClearDisplay();
    1512:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_voidClearDisplay>
	u8 key = KEY_NOT_PRESSED;
    1516:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidDisplayString("1)lights 0)exit");
    1518:	86 e7       	ldi	r24, 0x76	; 118
    151a:	92 e0       	ldi	r25, 0x02	; 2
    151c:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_voidDisplayString>
	while(key == KEY_NOT_PRESSED){
    1520:	04 c0       	rjmp	.+8      	; 0x152a <priv_LCDcontrolMainTerminal+0x28>
		KEYPAD_voidGetPressedKey(&key);
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_voidGetPressedKey>
	bool validChoice = false;
	while(!validChoice){
	LCD_voidClearDisplay();
	u8 key = KEY_NOT_PRESSED;
	LCD_voidDisplayString("1)lights 0)exit");
	while(key == KEY_NOT_PRESSED){
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	88 23       	and	r24, r24
    152e:	c9 f3       	breq	.-14     	; 0x1522 <priv_LCDcontrolMainTerminal+0x20>
		KEYPAD_voidGetPressedKey(&key);
	}
	switch(key){
    1530:	80 33       	cpi	r24, 0x30	; 48
    1532:	b9 f0       	breq	.+46     	; 0x1562 <priv_LCDcontrolMainTerminal+0x60>
    1534:	81 33       	cpi	r24, 0x31	; 49
    1536:	21 f4       	brne	.+8      	; 0x1540 <priv_LCDcontrolMainTerminal+0x3e>
		case '1':
		priv_voidLCDLightSystemControl();
    1538:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <priv_voidLCDLightSystemControl>
		validChoice = true;
    153c:	11 e0       	ldi	r17, 0x01	; 1
		break;
    153e:	0f c0       	rjmp	.+30     	; 0x155e <priv_LCDcontrolMainTerminal+0x5c>
		case '0':
		validChoice = true;
		return;
		default:
		LCD_voidClearDisplay();
    1540:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_voidClearDisplay>
		LCD_voidDisplayString("Invalid choice!");
    1544:	86 e8       	ldi	r24, 0x86	; 134
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	0e 94 13 05 	call	0xa26	; 0xa26 <LCD_voidDisplayString>
    154c:	2f ef       	ldi	r18, 0xFF	; 255
    154e:	8d e3       	ldi	r24, 0x3D	; 61
    1550:	99 e4       	ldi	r25, 0x49	; 73
    1552:	21 50       	subi	r18, 0x01	; 1
    1554:	80 40       	sbci	r24, 0x00	; 0
    1556:	90 40       	sbci	r25, 0x00	; 0
    1558:	e1 f7       	brne	.-8      	; 0x1552 <priv_LCDcontrolMainTerminal+0x50>
    155a:	00 c0       	rjmp	.+0      	; 0x155c <priv_LCDcontrolMainTerminal+0x5a>
    155c:	00 00       	nop
	}
}

void priv_LCDcontrolMainTerminal(){
	bool validChoice = false;
	while(!validChoice){
    155e:	11 23       	and	r17, r17
    1560:	c1 f2       	breq	.-80     	; 0x1512 <priv_LCDcontrolMainTerminal+0x10>
		LCD_voidDisplayString("Invalid choice!");
		_delay_ms(1500);
		validChoice = false;
	}
	}
}
    1562:	0f 90       	pop	r0
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	08 95       	ret

0000156c <__vector_1>:
}


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
	priv_LCDcontrolMainTerminal();
    158e:	0e 94 81 0a 	call	0x1502	; 0x1502 <priv_LCDcontrolMainTerminal>
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	bf 91       	pop	r27
    1598:	af 91       	pop	r26
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	7f 91       	pop	r23
    15a0:	6f 91       	pop	r22
    15a2:	5f 91       	pop	r21
    15a4:	4f 91       	pop	r20
    15a6:	3f 91       	pop	r19
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <TIMER0_voidInit>:
	
}
void TIMER0_voidStopTimer(void){
	CLEAR_BIT(TCCR0_REGISTER,CS00_BIT);
	CLEAR_BIT(TCCR0_REGISTER,CS01_BIT);
	CLEAR_BIT(TCCR0_REGISTER,CS02_BIT);
    15b4:	88 23       	and	r24, r24
    15b6:	19 f0       	breq	.+6      	; 0x15be <TIMER0_voidInit+0xa>
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	61 f0       	breq	.+24     	; 0x15d4 <TIMER0_voidInit+0x20>
    15bc:	08 95       	ret
    15be:	83 b7       	in	r24, 0x33	; 51
    15c0:	8f 7b       	andi	r24, 0xBF	; 191
    15c2:	83 bf       	out	0x33, r24	; 51
    15c4:	83 b7       	in	r24, 0x33	; 51
    15c6:	87 7f       	andi	r24, 0xF7	; 247
    15c8:	83 bf       	out	0x33, r24	; 51
    15ca:	12 be       	out	0x32, r1	; 50
    15cc:	89 b7       	in	r24, 0x39	; 57
    15ce:	81 60       	ori	r24, 0x01	; 1
    15d0:	89 bf       	out	0x39, r24	; 57
    15d2:	08 95       	ret
    15d4:	83 b7       	in	r24, 0x33	; 51
    15d6:	8f 7b       	andi	r24, 0xBF	; 191
    15d8:	83 bf       	out	0x33, r24	; 51
    15da:	83 b7       	in	r24, 0x33	; 51
    15dc:	88 60       	ori	r24, 0x08	; 8
    15de:	83 bf       	out	0x33, r24	; 51
    15e0:	89 ef       	ldi	r24, 0xF9	; 249
    15e2:	8c bf       	out	0x3c, r24	; 60
    15e4:	89 b7       	in	r24, 0x39	; 57
    15e6:	82 60       	ori	r24, 0x02	; 2
    15e8:	89 bf       	out	0x39, r24	; 57
    15ea:	08 95       	ret

000015ec <TIMER0_voidStartTimer>:
    15ec:	83 b7       	in	r24, 0x33	; 51
    15ee:	81 60       	ori	r24, 0x01	; 1
    15f0:	83 bf       	out	0x33, r24	; 51
    15f2:	83 b7       	in	r24, 0x33	; 51
    15f4:	82 60       	ori	r24, 0x02	; 2
    15f6:	83 bf       	out	0x33, r24	; 51
    15f8:	83 b7       	in	r24, 0x33	; 51
    15fa:	8b 7f       	andi	r24, 0xFB	; 251
    15fc:	83 bf       	out	0x33, r24	; 51
    15fe:	08 95       	ret

00001600 <TIMER0_voidSetCallBackFunction>:
}
void TIMER0_voidSetCallBackFunction (void(*pf)(void)){
	priv_pfCallBackFunction = pf;
    1600:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <priv_pfCallBackFunction+0x1>
    1604:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <priv_pfCallBackFunction>
    1608:	08 95       	ret

0000160a <__vector_11>:
}

void __vector_11 (void) __attribute__ ((signal));
void __vector_11 (void){
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
	static u16 local_u16OverflowCounter = 0;
	++local_u16OverflowCounter;
    162c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <local_u16OverflowCounter.1626>
    1630:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <local_u16OverflowCounter.1626+0x1>
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <local_u16OverflowCounter.1626+0x1>
    163a:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <local_u16OverflowCounter.1626>
	if(local_u16OverflowCounter == TIMER0_NUMBER_OF_OVERFLOWS){
    163e:	8a 3f       	cpi	r24, 0xFA	; 250
    1640:	91 05       	cpc	r25, r1
    1642:	51 f4       	brne	.+20     	; 0x1658 <__vector_11+0x4e>
		local_u16OverflowCounter = 0;
    1644:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <local_u16OverflowCounter.1626+0x1>
    1648:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <local_u16OverflowCounter.1626>
		//set preload value
		TCNT0_REGISTER = TIMER0_PRELOAD_VALUE;
    164c:	12 be       	out	0x32, r1	; 50
		priv_pfCallBackFunction();
    164e:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <priv_pfCallBackFunction>
    1652:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <priv_pfCallBackFunction+0x1>
    1656:	09 95       	icall
	}
}
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_10>:

void __vector_10 (void) __attribute__ ((signal));
void __vector_10 (void){
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
	static u16 local_u16OverFlowsCounter = 0;
	++local_u16OverFlowsCounter;
    169c:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end>
    16a0:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <__data_end+0x1>
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <__data_end+0x1>
    16aa:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <__data_end>
	if(local_u16OverFlowsCounter == TIMER0_NUMBER_OF_OVERFLOWS){
    16ae:	8a 3f       	cpi	r24, 0xFA	; 250
    16b0:	91 05       	cpc	r25, r1
    16b2:	49 f4       	brne	.+18     	; 0x16c6 <__vector_10+0x4c>
		local_u16OverFlowsCounter = 0;
    16b4:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <__data_end+0x1>
    16b8:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
		priv_pfCallBackFunction();
    16bc:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <priv_pfCallBackFunction>
    16c0:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <priv_pfCallBackFunction+0x1>
    16c4:	09 95       	icall
	}
    16c6:	ff 91       	pop	r31
    16c8:	ef 91       	pop	r30
    16ca:	bf 91       	pop	r27
    16cc:	af 91       	pop	r26
    16ce:	9f 91       	pop	r25
    16d0:	8f 91       	pop	r24
    16d2:	7f 91       	pop	r23
    16d4:	6f 91       	pop	r22
    16d6:	5f 91       	pop	r21
    16d8:	4f 91       	pop	r20
    16da:	3f 91       	pop	r19
    16dc:	2f 91       	pop	r18
    16de:	0f 90       	pop	r0
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <UART_voidInit>:


void UART_voidInit(void)
{
	//set baud rate value to 9600
	UBRRL_REG = UBRR_VALUE;
    16e8:	87 e6       	ldi	r24, 0x67	; 103
    16ea:	89 b9       	out	0x09, r24	; 9
	//disable double speed mode
	CLEAR_BIT(UCSRA_REG, U2X_BIT);
    16ec:	8b b1       	in	r24, 0x0b	; 11
    16ee:	8d 7f       	andi	r24, 0xFD	; 253
    16f0:	8b b9       	out	0x0b, r24	; 11
	
	// Disable UART interrupts
	CLEAR_BIT(UCSRB_REG, RXCIE_BIT);
    16f2:	8a b1       	in	r24, 0x0a	; 10
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	8a b9       	out	0x0a, r24	; 10
	CLEAR_BIT(UCSRB_REG, TXCIE_BIT);
    16f8:	8a b1       	in	r24, 0x0a	; 10
    16fa:	8f 7b       	andi	r24, 0xBF	; 191
    16fc:	8a b9       	out	0x0a, r24	; 10
	CLEAR_BIT(UCSRB_REG, UDRIE_BIT);
    16fe:	8a b1       	in	r24, 0x0a	; 10
    1700:	8f 7d       	andi	r24, 0xDF	; 223
    1702:	8a b9       	out	0x0a, r24	; 10
	
	//configuring UART to standard configurations(8n1 9600)
	UCSRC_REG = 0x86; //0b10000110;
    1704:	86 e8       	ldi	r24, 0x86	; 134
    1706:	80 bd       	out	0x20, r24	; 32
	CLEAR_BIT(UCSRB_REG, UCSZ2_BIT);
    1708:	8a b1       	in	r24, 0x0a	; 10
    170a:	8b 7f       	andi	r24, 0xFB	; 251
    170c:	8a b9       	out	0x0a, r24	; 10
	
	// Enable UART Rx
	SET_BIT(UCSRB_REG, RXEN_BIT);
    170e:	8a b1       	in	r24, 0x0a	; 10
    1710:	80 61       	ori	r24, 0x10	; 16
    1712:	8a b9       	out	0x0a, r24	; 10
	
	// Enable UART Tx
	SET_BIT(UCSRB_REG, TXEN_BIT);
    1714:	8a b1       	in	r24, 0x0a	; 10
    1716:	88 60       	ori	r24, 0x08	; 8
    1718:	8a b9       	out	0x0a, r24	; 10
    171a:	08 95       	ret

0000171c <UART_voidTxChar>:
}
void UART_voidTxChar(u8 copy_u8TxData){
	//busy wait for UDE empty flag
	while(GET_BIT(UCSRA_REG,UDRE_BIT) == 0);
    171c:	5d 9b       	sbis	0x0b, 5	; 11
    171e:	fe cf       	rjmp	.-4      	; 0x171c <UART_voidTxChar>
	//putting data in UDR
	UDR_REG = copy_u8TxData;
    1720:	8c b9       	out	0x0c, r24	; 12
    1722:	08 95       	ret

00001724 <UART_voidRxChar>:
}
void UART_voidRxChar(u8* copy_pu8RxData){
	while(GET_BIT(UCSRA_REG,RXC_BIT) == 0);
    1724:	5f 9b       	sbis	0x0b, 7	; 11
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <UART_voidRxChar>
	*copy_pu8RxData = UDR_REG;
    1728:	2c b1       	in	r18, 0x0c	; 12
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
    172e:	08 95       	ret

00001730 <UART_voidTxString>:
}
void UART_voidTxString(const char* copy_pu8String){
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	8c 01       	movw	r16, r24
	u8 local_u8Counter = 0;
	u8 local_u8currentChar = copy_pu8String[0];
    1738:	fc 01       	movw	r30, r24
    173a:	80 81       	ld	r24, Z
void UART_voidRxChar(u8* copy_pu8RxData){
	while(GET_BIT(UCSRA_REG,RXC_BIT) == 0);
	*copy_pu8RxData = UDR_REG;
}
void UART_voidTxString(const char* copy_pu8String){
	u8 local_u8Counter = 0;
    173c:	c0 e0       	ldi	r28, 0x00	; 0
	u8 local_u8currentChar = copy_pu8String[0];
	while(local_u8currentChar != '\0'){
    173e:	07 c0       	rjmp	.+14     	; 0x174e <UART_voidTxString+0x1e>
		UART_voidTxChar(local_u8currentChar);
    1740:	0e 94 8e 0b 	call	0x171c	; 0x171c <UART_voidTxChar>
		++local_u8Counter;
    1744:	cf 5f       	subi	r28, 0xFF	; 255
		local_u8currentChar = copy_pu8String[local_u8Counter];
    1746:	f8 01       	movw	r30, r16
    1748:	ec 0f       	add	r30, r28
    174a:	f1 1d       	adc	r31, r1
    174c:	80 81       	ld	r24, Z
	*copy_pu8RxData = UDR_REG;
}
void UART_voidTxString(const char* copy_pu8String){
	u8 local_u8Counter = 0;
	u8 local_u8currentChar = copy_pu8String[0];
	while(local_u8currentChar != '\0'){
    174e:	81 11       	cpse	r24, r1
    1750:	f7 cf       	rjmp	.-18     	; 0x1740 <UART_voidTxString+0x10>
		UART_voidTxChar(local_u8currentChar);
		++local_u8Counter;
		local_u8currentChar = copy_pu8String[local_u8Counter];
	}
}
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	08 95       	ret

0000175a <__subsf3>:
    175a:	50 58       	subi	r21, 0x80	; 128

0000175c <__addsf3>:
    175c:	bb 27       	eor	r27, r27
    175e:	aa 27       	eor	r26, r26
    1760:	0e 94 c5 0b 	call	0x178a	; 0x178a <__addsf3x>
    1764:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__fp_round>
    1768:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fp_pscA>
    176c:	38 f0       	brcs	.+14     	; 0x177c <__addsf3+0x20>
    176e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__fp_pscB>
    1772:	20 f0       	brcs	.+8      	; 0x177c <__addsf3+0x20>
    1774:	39 f4       	brne	.+14     	; 0x1784 <__addsf3+0x28>
    1776:	9f 3f       	cpi	r25, 0xFF	; 255
    1778:	19 f4       	brne	.+6      	; 0x1780 <__addsf3+0x24>
    177a:	26 f4       	brtc	.+8      	; 0x1784 <__addsf3+0x28>
    177c:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_nan>
    1780:	0e f4       	brtc	.+2      	; 0x1784 <__addsf3+0x28>
    1782:	e0 95       	com	r30
    1784:	e7 fb       	bst	r30, 7
    1786:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__fp_inf>

0000178a <__addsf3x>:
    178a:	e9 2f       	mov	r30, r25
    178c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__fp_split3>
    1790:	58 f3       	brcs	.-42     	; 0x1768 <__addsf3+0xc>
    1792:	ba 17       	cp	r27, r26
    1794:	62 07       	cpc	r22, r18
    1796:	73 07       	cpc	r23, r19
    1798:	84 07       	cpc	r24, r20
    179a:	95 07       	cpc	r25, r21
    179c:	20 f0       	brcs	.+8      	; 0x17a6 <__addsf3x+0x1c>
    179e:	79 f4       	brne	.+30     	; 0x17be <__addsf3x+0x34>
    17a0:	a6 f5       	brtc	.+104    	; 0x180a <__addsf3x+0x80>
    17a2:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__fp_zero>
    17a6:	0e f4       	brtc	.+2      	; 0x17aa <__addsf3x+0x20>
    17a8:	e0 95       	com	r30
    17aa:	0b 2e       	mov	r0, r27
    17ac:	ba 2f       	mov	r27, r26
    17ae:	a0 2d       	mov	r26, r0
    17b0:	0b 01       	movw	r0, r22
    17b2:	b9 01       	movw	r22, r18
    17b4:	90 01       	movw	r18, r0
    17b6:	0c 01       	movw	r0, r24
    17b8:	ca 01       	movw	r24, r20
    17ba:	a0 01       	movw	r20, r0
    17bc:	11 24       	eor	r1, r1
    17be:	ff 27       	eor	r31, r31
    17c0:	59 1b       	sub	r21, r25
    17c2:	99 f0       	breq	.+38     	; 0x17ea <__addsf3x+0x60>
    17c4:	59 3f       	cpi	r21, 0xF9	; 249
    17c6:	50 f4       	brcc	.+20     	; 0x17dc <__addsf3x+0x52>
    17c8:	50 3e       	cpi	r21, 0xE0	; 224
    17ca:	68 f1       	brcs	.+90     	; 0x1826 <__addsf3x+0x9c>
    17cc:	1a 16       	cp	r1, r26
    17ce:	f0 40       	sbci	r31, 0x00	; 0
    17d0:	a2 2f       	mov	r26, r18
    17d2:	23 2f       	mov	r18, r19
    17d4:	34 2f       	mov	r19, r20
    17d6:	44 27       	eor	r20, r20
    17d8:	58 5f       	subi	r21, 0xF8	; 248
    17da:	f3 cf       	rjmp	.-26     	; 0x17c2 <__addsf3x+0x38>
    17dc:	46 95       	lsr	r20
    17de:	37 95       	ror	r19
    17e0:	27 95       	ror	r18
    17e2:	a7 95       	ror	r26
    17e4:	f0 40       	sbci	r31, 0x00	; 0
    17e6:	53 95       	inc	r21
    17e8:	c9 f7       	brne	.-14     	; 0x17dc <__addsf3x+0x52>
    17ea:	7e f4       	brtc	.+30     	; 0x180a <__addsf3x+0x80>
    17ec:	1f 16       	cp	r1, r31
    17ee:	ba 0b       	sbc	r27, r26
    17f0:	62 0b       	sbc	r22, r18
    17f2:	73 0b       	sbc	r23, r19
    17f4:	84 0b       	sbc	r24, r20
    17f6:	ba f0       	brmi	.+46     	; 0x1826 <__addsf3x+0x9c>
    17f8:	91 50       	subi	r25, 0x01	; 1
    17fa:	a1 f0       	breq	.+40     	; 0x1824 <__addsf3x+0x9a>
    17fc:	ff 0f       	add	r31, r31
    17fe:	bb 1f       	adc	r27, r27
    1800:	66 1f       	adc	r22, r22
    1802:	77 1f       	adc	r23, r23
    1804:	88 1f       	adc	r24, r24
    1806:	c2 f7       	brpl	.-16     	; 0x17f8 <__addsf3x+0x6e>
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <__addsf3x+0x9c>
    180a:	ba 0f       	add	r27, r26
    180c:	62 1f       	adc	r22, r18
    180e:	73 1f       	adc	r23, r19
    1810:	84 1f       	adc	r24, r20
    1812:	48 f4       	brcc	.+18     	; 0x1826 <__addsf3x+0x9c>
    1814:	87 95       	ror	r24
    1816:	77 95       	ror	r23
    1818:	67 95       	ror	r22
    181a:	b7 95       	ror	r27
    181c:	f7 95       	ror	r31
    181e:	9e 3f       	cpi	r25, 0xFE	; 254
    1820:	08 f0       	brcs	.+2      	; 0x1824 <__addsf3x+0x9a>
    1822:	b0 cf       	rjmp	.-160    	; 0x1784 <__addsf3+0x28>
    1824:	93 95       	inc	r25
    1826:	88 0f       	add	r24, r24
    1828:	08 f0       	brcs	.+2      	; 0x182c <__addsf3x+0xa2>
    182a:	99 27       	eor	r25, r25
    182c:	ee 0f       	add	r30, r30
    182e:	97 95       	ror	r25
    1830:	87 95       	ror	r24
    1832:	08 95       	ret

00001834 <__divsf3>:
    1834:	0e 94 2e 0c 	call	0x185c	; 0x185c <__divsf3x>
    1838:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__fp_round>
    183c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__fp_pscB>
    1840:	58 f0       	brcs	.+22     	; 0x1858 <__divsf3+0x24>
    1842:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fp_pscA>
    1846:	40 f0       	brcs	.+16     	; 0x1858 <__divsf3+0x24>
    1848:	29 f4       	brne	.+10     	; 0x1854 <__divsf3+0x20>
    184a:	5f 3f       	cpi	r21, 0xFF	; 255
    184c:	29 f0       	breq	.+10     	; 0x1858 <__divsf3+0x24>
    184e:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__fp_inf>
    1852:	51 11       	cpse	r21, r1
    1854:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_szero>
    1858:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_nan>

0000185c <__divsf3x>:
    185c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__fp_split3>
    1860:	68 f3       	brcs	.-38     	; 0x183c <__divsf3+0x8>

00001862 <__divsf3_pse>:
    1862:	99 23       	and	r25, r25
    1864:	b1 f3       	breq	.-20     	; 0x1852 <__divsf3+0x1e>
    1866:	55 23       	and	r21, r21
    1868:	91 f3       	breq	.-28     	; 0x184e <__divsf3+0x1a>
    186a:	95 1b       	sub	r25, r21
    186c:	55 0b       	sbc	r21, r21
    186e:	bb 27       	eor	r27, r27
    1870:	aa 27       	eor	r26, r26
    1872:	62 17       	cp	r22, r18
    1874:	73 07       	cpc	r23, r19
    1876:	84 07       	cpc	r24, r20
    1878:	38 f0       	brcs	.+14     	; 0x1888 <__divsf3_pse+0x26>
    187a:	9f 5f       	subi	r25, 0xFF	; 255
    187c:	5f 4f       	sbci	r21, 0xFF	; 255
    187e:	22 0f       	add	r18, r18
    1880:	33 1f       	adc	r19, r19
    1882:	44 1f       	adc	r20, r20
    1884:	aa 1f       	adc	r26, r26
    1886:	a9 f3       	breq	.-22     	; 0x1872 <__divsf3_pse+0x10>
    1888:	35 d0       	rcall	.+106    	; 0x18f4 <__divsf3_pse+0x92>
    188a:	0e 2e       	mov	r0, r30
    188c:	3a f0       	brmi	.+14     	; 0x189c <__divsf3_pse+0x3a>
    188e:	e0 e8       	ldi	r30, 0x80	; 128
    1890:	32 d0       	rcall	.+100    	; 0x18f6 <__divsf3_pse+0x94>
    1892:	91 50       	subi	r25, 0x01	; 1
    1894:	50 40       	sbci	r21, 0x00	; 0
    1896:	e6 95       	lsr	r30
    1898:	00 1c       	adc	r0, r0
    189a:	ca f7       	brpl	.-14     	; 0x188e <__divsf3_pse+0x2c>
    189c:	2b d0       	rcall	.+86     	; 0x18f4 <__divsf3_pse+0x92>
    189e:	fe 2f       	mov	r31, r30
    18a0:	29 d0       	rcall	.+82     	; 0x18f4 <__divsf3_pse+0x92>
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	bb 1f       	adc	r27, r27
    18aa:	26 17       	cp	r18, r22
    18ac:	37 07       	cpc	r19, r23
    18ae:	48 07       	cpc	r20, r24
    18b0:	ab 07       	cpc	r26, r27
    18b2:	b0 e8       	ldi	r27, 0x80	; 128
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <__divsf3_pse+0x56>
    18b6:	bb 0b       	sbc	r27, r27
    18b8:	80 2d       	mov	r24, r0
    18ba:	bf 01       	movw	r22, r30
    18bc:	ff 27       	eor	r31, r31
    18be:	93 58       	subi	r25, 0x83	; 131
    18c0:	5f 4f       	sbci	r21, 0xFF	; 255
    18c2:	3a f0       	brmi	.+14     	; 0x18d2 <__divsf3_pse+0x70>
    18c4:	9e 3f       	cpi	r25, 0xFE	; 254
    18c6:	51 05       	cpc	r21, r1
    18c8:	78 f0       	brcs	.+30     	; 0x18e8 <__divsf3_pse+0x86>
    18ca:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__fp_inf>
    18ce:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_szero>
    18d2:	5f 3f       	cpi	r21, 0xFF	; 255
    18d4:	e4 f3       	brlt	.-8      	; 0x18ce <__divsf3_pse+0x6c>
    18d6:	98 3e       	cpi	r25, 0xE8	; 232
    18d8:	d4 f3       	brlt	.-12     	; 0x18ce <__divsf3_pse+0x6c>
    18da:	86 95       	lsr	r24
    18dc:	77 95       	ror	r23
    18de:	67 95       	ror	r22
    18e0:	b7 95       	ror	r27
    18e2:	f7 95       	ror	r31
    18e4:	9f 5f       	subi	r25, 0xFF	; 255
    18e6:	c9 f7       	brne	.-14     	; 0x18da <__divsf3_pse+0x78>
    18e8:	88 0f       	add	r24, r24
    18ea:	91 1d       	adc	r25, r1
    18ec:	96 95       	lsr	r25
    18ee:	87 95       	ror	r24
    18f0:	97 f9       	bld	r25, 7
    18f2:	08 95       	ret
    18f4:	e1 e0       	ldi	r30, 0x01	; 1
    18f6:	66 0f       	add	r22, r22
    18f8:	77 1f       	adc	r23, r23
    18fa:	88 1f       	adc	r24, r24
    18fc:	bb 1f       	adc	r27, r27
    18fe:	62 17       	cp	r22, r18
    1900:	73 07       	cpc	r23, r19
    1902:	84 07       	cpc	r24, r20
    1904:	ba 07       	cpc	r27, r26
    1906:	20 f0       	brcs	.+8      	; 0x1910 <__divsf3_pse+0xae>
    1908:	62 1b       	sub	r22, r18
    190a:	73 0b       	sbc	r23, r19
    190c:	84 0b       	sbc	r24, r20
    190e:	ba 0b       	sbc	r27, r26
    1910:	ee 1f       	adc	r30, r30
    1912:	88 f7       	brcc	.-30     	; 0x18f6 <__divsf3_pse+0x94>
    1914:	e0 95       	com	r30
    1916:	08 95       	ret

00001918 <__fixunssfsi>:
    1918:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fp_splitA>
    191c:	88 f0       	brcs	.+34     	; 0x1940 <__fixunssfsi+0x28>
    191e:	9f 57       	subi	r25, 0x7F	; 127
    1920:	98 f0       	brcs	.+38     	; 0x1948 <__fixunssfsi+0x30>
    1922:	b9 2f       	mov	r27, r25
    1924:	99 27       	eor	r25, r25
    1926:	b7 51       	subi	r27, 0x17	; 23
    1928:	b0 f0       	brcs	.+44     	; 0x1956 <__fixunssfsi+0x3e>
    192a:	e1 f0       	breq	.+56     	; 0x1964 <__fixunssfsi+0x4c>
    192c:	66 0f       	add	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	1a f0       	brmi	.+6      	; 0x193c <__fixunssfsi+0x24>
    1936:	ba 95       	dec	r27
    1938:	c9 f7       	brne	.-14     	; 0x192c <__fixunssfsi+0x14>
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <__fixunssfsi+0x4c>
    193c:	b1 30       	cpi	r27, 0x01	; 1
    193e:	91 f0       	breq	.+36     	; 0x1964 <__fixunssfsi+0x4c>
    1940:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__fp_zero>
    1944:	b1 e0       	ldi	r27, 0x01	; 1
    1946:	08 95       	ret
    1948:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__fp_zero>
    194c:	67 2f       	mov	r22, r23
    194e:	78 2f       	mov	r23, r24
    1950:	88 27       	eor	r24, r24
    1952:	b8 5f       	subi	r27, 0xF8	; 248
    1954:	39 f0       	breq	.+14     	; 0x1964 <__fixunssfsi+0x4c>
    1956:	b9 3f       	cpi	r27, 0xF9	; 249
    1958:	cc f3       	brlt	.-14     	; 0x194c <__fixunssfsi+0x34>
    195a:	86 95       	lsr	r24
    195c:	77 95       	ror	r23
    195e:	67 95       	ror	r22
    1960:	b3 95       	inc	r27
    1962:	d9 f7       	brne	.-10     	; 0x195a <__fixunssfsi+0x42>
    1964:	3e f4       	brtc	.+14     	; 0x1974 <__fixunssfsi+0x5c>
    1966:	90 95       	com	r25
    1968:	80 95       	com	r24
    196a:	70 95       	com	r23
    196c:	61 95       	neg	r22
    196e:	7f 4f       	sbci	r23, 0xFF	; 255
    1970:	8f 4f       	sbci	r24, 0xFF	; 255
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	08 95       	ret

00001976 <__floatunsisf>:
    1976:	e8 94       	clt
    1978:	09 c0       	rjmp	.+18     	; 0x198c <__floatsisf+0x12>

0000197a <__floatsisf>:
    197a:	97 fb       	bst	r25, 7
    197c:	3e f4       	brtc	.+14     	; 0x198c <__floatsisf+0x12>
    197e:	90 95       	com	r25
    1980:	80 95       	com	r24
    1982:	70 95       	com	r23
    1984:	61 95       	neg	r22
    1986:	7f 4f       	sbci	r23, 0xFF	; 255
    1988:	8f 4f       	sbci	r24, 0xFF	; 255
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	99 23       	and	r25, r25
    198e:	a9 f0       	breq	.+42     	; 0x19ba <__floatsisf+0x40>
    1990:	f9 2f       	mov	r31, r25
    1992:	96 e9       	ldi	r25, 0x96	; 150
    1994:	bb 27       	eor	r27, r27
    1996:	93 95       	inc	r25
    1998:	f6 95       	lsr	r31
    199a:	87 95       	ror	r24
    199c:	77 95       	ror	r23
    199e:	67 95       	ror	r22
    19a0:	b7 95       	ror	r27
    19a2:	f1 11       	cpse	r31, r1
    19a4:	f8 cf       	rjmp	.-16     	; 0x1996 <__floatsisf+0x1c>
    19a6:	fa f4       	brpl	.+62     	; 0x19e6 <__floatsisf+0x6c>
    19a8:	bb 0f       	add	r27, r27
    19aa:	11 f4       	brne	.+4      	; 0x19b0 <__floatsisf+0x36>
    19ac:	60 ff       	sbrs	r22, 0
    19ae:	1b c0       	rjmp	.+54     	; 0x19e6 <__floatsisf+0x6c>
    19b0:	6f 5f       	subi	r22, 0xFF	; 255
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	8f 4f       	sbci	r24, 0xFF	; 255
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	16 c0       	rjmp	.+44     	; 0x19e6 <__floatsisf+0x6c>
    19ba:	88 23       	and	r24, r24
    19bc:	11 f0       	breq	.+4      	; 0x19c2 <__floatsisf+0x48>
    19be:	96 e9       	ldi	r25, 0x96	; 150
    19c0:	11 c0       	rjmp	.+34     	; 0x19e4 <__floatsisf+0x6a>
    19c2:	77 23       	and	r23, r23
    19c4:	21 f0       	breq	.+8      	; 0x19ce <__floatsisf+0x54>
    19c6:	9e e8       	ldi	r25, 0x8E	; 142
    19c8:	87 2f       	mov	r24, r23
    19ca:	76 2f       	mov	r23, r22
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <__floatsisf+0x5e>
    19ce:	66 23       	and	r22, r22
    19d0:	71 f0       	breq	.+28     	; 0x19ee <__floatsisf+0x74>
    19d2:	96 e8       	ldi	r25, 0x86	; 134
    19d4:	86 2f       	mov	r24, r22
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	2a f0       	brmi	.+10     	; 0x19e6 <__floatsisf+0x6c>
    19dc:	9a 95       	dec	r25
    19de:	66 0f       	add	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	88 1f       	adc	r24, r24
    19e4:	da f7       	brpl	.-10     	; 0x19dc <__floatsisf+0x62>
    19e6:	88 0f       	add	r24, r24
    19e8:	96 95       	lsr	r25
    19ea:	87 95       	ror	r24
    19ec:	97 f9       	bld	r25, 7
    19ee:	08 95       	ret

000019f0 <__fp_inf>:
    19f0:	97 f9       	bld	r25, 7
    19f2:	9f 67       	ori	r25, 0x7F	; 127
    19f4:	80 e8       	ldi	r24, 0x80	; 128
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	08 95       	ret

000019fc <__fp_nan>:
    19fc:	9f ef       	ldi	r25, 0xFF	; 255
    19fe:	80 ec       	ldi	r24, 0xC0	; 192
    1a00:	08 95       	ret

00001a02 <__fp_pscA>:
    1a02:	00 24       	eor	r0, r0
    1a04:	0a 94       	dec	r0
    1a06:	16 16       	cp	r1, r22
    1a08:	17 06       	cpc	r1, r23
    1a0a:	18 06       	cpc	r1, r24
    1a0c:	09 06       	cpc	r0, r25
    1a0e:	08 95       	ret

00001a10 <__fp_pscB>:
    1a10:	00 24       	eor	r0, r0
    1a12:	0a 94       	dec	r0
    1a14:	12 16       	cp	r1, r18
    1a16:	13 06       	cpc	r1, r19
    1a18:	14 06       	cpc	r1, r20
    1a1a:	05 06       	cpc	r0, r21
    1a1c:	08 95       	ret

00001a1e <__fp_round>:
    1a1e:	09 2e       	mov	r0, r25
    1a20:	03 94       	inc	r0
    1a22:	00 0c       	add	r0, r0
    1a24:	11 f4       	brne	.+4      	; 0x1a2a <__fp_round+0xc>
    1a26:	88 23       	and	r24, r24
    1a28:	52 f0       	brmi	.+20     	; 0x1a3e <__fp_round+0x20>
    1a2a:	bb 0f       	add	r27, r27
    1a2c:	40 f4       	brcc	.+16     	; 0x1a3e <__fp_round+0x20>
    1a2e:	bf 2b       	or	r27, r31
    1a30:	11 f4       	brne	.+4      	; 0x1a36 <__fp_round+0x18>
    1a32:	60 ff       	sbrs	r22, 0
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <__fp_round+0x20>
    1a36:	6f 5f       	subi	r22, 0xFF	; 255
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	08 95       	ret

00001a40 <__fp_split3>:
    1a40:	57 fd       	sbrc	r21, 7
    1a42:	90 58       	subi	r25, 0x80	; 128
    1a44:	44 0f       	add	r20, r20
    1a46:	55 1f       	adc	r21, r21
    1a48:	59 f0       	breq	.+22     	; 0x1a60 <__fp_splitA+0x10>
    1a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a4c:	71 f0       	breq	.+28     	; 0x1a6a <__fp_splitA+0x1a>
    1a4e:	47 95       	ror	r20

00001a50 <__fp_splitA>:
    1a50:	88 0f       	add	r24, r24
    1a52:	97 fb       	bst	r25, 7
    1a54:	99 1f       	adc	r25, r25
    1a56:	61 f0       	breq	.+24     	; 0x1a70 <__fp_splitA+0x20>
    1a58:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5a:	79 f0       	breq	.+30     	; 0x1a7a <__fp_splitA+0x2a>
    1a5c:	87 95       	ror	r24
    1a5e:	08 95       	ret
    1a60:	12 16       	cp	r1, r18
    1a62:	13 06       	cpc	r1, r19
    1a64:	14 06       	cpc	r1, r20
    1a66:	55 1f       	adc	r21, r21
    1a68:	f2 cf       	rjmp	.-28     	; 0x1a4e <__fp_split3+0xe>
    1a6a:	46 95       	lsr	r20
    1a6c:	f1 df       	rcall	.-30     	; 0x1a50 <__fp_splitA>
    1a6e:	08 c0       	rjmp	.+16     	; 0x1a80 <__fp_splitA+0x30>
    1a70:	16 16       	cp	r1, r22
    1a72:	17 06       	cpc	r1, r23
    1a74:	18 06       	cpc	r1, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	f1 cf       	rjmp	.-30     	; 0x1a5c <__fp_splitA+0xc>
    1a7a:	86 95       	lsr	r24
    1a7c:	71 05       	cpc	r23, r1
    1a7e:	61 05       	cpc	r22, r1
    1a80:	08 94       	sec
    1a82:	08 95       	ret

00001a84 <__fp_zero>:
    1a84:	e8 94       	clt

00001a86 <__fp_szero>:
    1a86:	bb 27       	eor	r27, r27
    1a88:	66 27       	eor	r22, r22
    1a8a:	77 27       	eor	r23, r23
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	97 f9       	bld	r25, 7
    1a90:	08 95       	ret

00001a92 <__mulsf3>:
    1a92:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__mulsf3x>
    1a96:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__fp_round>
    1a9a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fp_pscA>
    1a9e:	38 f0       	brcs	.+14     	; 0x1aae <__mulsf3+0x1c>
    1aa0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__fp_pscB>
    1aa4:	20 f0       	brcs	.+8      	; 0x1aae <__mulsf3+0x1c>
    1aa6:	95 23       	and	r25, r21
    1aa8:	11 f0       	breq	.+4      	; 0x1aae <__mulsf3+0x1c>
    1aaa:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__fp_inf>
    1aae:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__fp_nan>
    1ab2:	11 24       	eor	r1, r1
    1ab4:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_szero>

00001ab8 <__mulsf3x>:
    1ab8:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__fp_split3>
    1abc:	70 f3       	brcs	.-36     	; 0x1a9a <__mulsf3+0x8>

00001abe <__mulsf3_pse>:
    1abe:	95 9f       	mul	r25, r21
    1ac0:	c1 f3       	breq	.-16     	; 0x1ab2 <__mulsf3+0x20>
    1ac2:	95 0f       	add	r25, r21
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	55 1f       	adc	r21, r21
    1ac8:	62 9f       	mul	r22, r18
    1aca:	f0 01       	movw	r30, r0
    1acc:	72 9f       	mul	r23, r18
    1ace:	bb 27       	eor	r27, r27
    1ad0:	f0 0d       	add	r31, r0
    1ad2:	b1 1d       	adc	r27, r1
    1ad4:	63 9f       	mul	r22, r19
    1ad6:	aa 27       	eor	r26, r26
    1ad8:	f0 0d       	add	r31, r0
    1ada:	b1 1d       	adc	r27, r1
    1adc:	aa 1f       	adc	r26, r26
    1ade:	64 9f       	mul	r22, r20
    1ae0:	66 27       	eor	r22, r22
    1ae2:	b0 0d       	add	r27, r0
    1ae4:	a1 1d       	adc	r26, r1
    1ae6:	66 1f       	adc	r22, r22
    1ae8:	82 9f       	mul	r24, r18
    1aea:	22 27       	eor	r18, r18
    1aec:	b0 0d       	add	r27, r0
    1aee:	a1 1d       	adc	r26, r1
    1af0:	62 1f       	adc	r22, r18
    1af2:	73 9f       	mul	r23, r19
    1af4:	b0 0d       	add	r27, r0
    1af6:	a1 1d       	adc	r26, r1
    1af8:	62 1f       	adc	r22, r18
    1afa:	83 9f       	mul	r24, r19
    1afc:	a0 0d       	add	r26, r0
    1afe:	61 1d       	adc	r22, r1
    1b00:	22 1f       	adc	r18, r18
    1b02:	74 9f       	mul	r23, r20
    1b04:	33 27       	eor	r19, r19
    1b06:	a0 0d       	add	r26, r0
    1b08:	61 1d       	adc	r22, r1
    1b0a:	23 1f       	adc	r18, r19
    1b0c:	84 9f       	mul	r24, r20
    1b0e:	60 0d       	add	r22, r0
    1b10:	21 1d       	adc	r18, r1
    1b12:	82 2f       	mov	r24, r18
    1b14:	76 2f       	mov	r23, r22
    1b16:	6a 2f       	mov	r22, r26
    1b18:	11 24       	eor	r1, r1
    1b1a:	9f 57       	subi	r25, 0x7F	; 127
    1b1c:	50 40       	sbci	r21, 0x00	; 0
    1b1e:	9a f0       	brmi	.+38     	; 0x1b46 <__mulsf3_pse+0x88>
    1b20:	f1 f0       	breq	.+60     	; 0x1b5e <__mulsf3_pse+0xa0>
    1b22:	88 23       	and	r24, r24
    1b24:	4a f0       	brmi	.+18     	; 0x1b38 <__mulsf3_pse+0x7a>
    1b26:	ee 0f       	add	r30, r30
    1b28:	ff 1f       	adc	r31, r31
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	66 1f       	adc	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	91 50       	subi	r25, 0x01	; 1
    1b34:	50 40       	sbci	r21, 0x00	; 0
    1b36:	a9 f7       	brne	.-22     	; 0x1b22 <__mulsf3_pse+0x64>
    1b38:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	80 f0       	brcs	.+32     	; 0x1b5e <__mulsf3_pse+0xa0>
    1b3e:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__fp_inf>
    1b42:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__fp_szero>
    1b46:	5f 3f       	cpi	r21, 0xFF	; 255
    1b48:	e4 f3       	brlt	.-8      	; 0x1b42 <__mulsf3_pse+0x84>
    1b4a:	98 3e       	cpi	r25, 0xE8	; 232
    1b4c:	d4 f3       	brlt	.-12     	; 0x1b42 <__mulsf3_pse+0x84>
    1b4e:	86 95       	lsr	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	b7 95       	ror	r27
    1b56:	f7 95       	ror	r31
    1b58:	e7 95       	ror	r30
    1b5a:	9f 5f       	subi	r25, 0xFF	; 255
    1b5c:	c1 f7       	brne	.-16     	; 0x1b4e <__mulsf3_pse+0x90>
    1b5e:	fe 2b       	or	r31, r30
    1b60:	88 0f       	add	r24, r24
    1b62:	91 1d       	adc	r25, r1
    1b64:	96 95       	lsr	r25
    1b66:	87 95       	ror	r24
    1b68:	97 f9       	bld	r25, 7
    1b6a:	08 95       	ret

00001b6c <__divmodhi4>:
    1b6c:	97 fb       	bst	r25, 7
    1b6e:	07 2e       	mov	r0, r23
    1b70:	16 f4       	brtc	.+4      	; 0x1b76 <__divmodhi4+0xa>
    1b72:	00 94       	com	r0
    1b74:	07 d0       	rcall	.+14     	; 0x1b84 <__divmodhi4_neg1>
    1b76:	77 fd       	sbrc	r23, 7
    1b78:	09 d0       	rcall	.+18     	; 0x1b8c <__divmodhi4_neg2>
    1b7a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <__udivmodhi4>
    1b7e:	07 fc       	sbrc	r0, 7
    1b80:	05 d0       	rcall	.+10     	; 0x1b8c <__divmodhi4_neg2>
    1b82:	3e f4       	brtc	.+14     	; 0x1b92 <__divmodhi4_exit>

00001b84 <__divmodhi4_neg1>:
    1b84:	90 95       	com	r25
    1b86:	81 95       	neg	r24
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	08 95       	ret

00001b8c <__divmodhi4_neg2>:
    1b8c:	70 95       	com	r23
    1b8e:	61 95       	neg	r22
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255

00001b92 <__divmodhi4_exit>:
    1b92:	08 95       	ret

00001b94 <__udivmodsi4>:
    1b94:	a1 e2       	ldi	r26, 0x21	; 33
    1b96:	1a 2e       	mov	r1, r26
    1b98:	aa 1b       	sub	r26, r26
    1b9a:	bb 1b       	sub	r27, r27
    1b9c:	fd 01       	movw	r30, r26
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <__udivmodsi4_ep>

00001ba0 <__udivmodsi4_loop>:
    1ba0:	aa 1f       	adc	r26, r26
    1ba2:	bb 1f       	adc	r27, r27
    1ba4:	ee 1f       	adc	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	a2 17       	cp	r26, r18
    1baa:	b3 07       	cpc	r27, r19
    1bac:	e4 07       	cpc	r30, r20
    1bae:	f5 07       	cpc	r31, r21
    1bb0:	20 f0       	brcs	.+8      	; 0x1bba <__udivmodsi4_ep>
    1bb2:	a2 1b       	sub	r26, r18
    1bb4:	b3 0b       	sbc	r27, r19
    1bb6:	e4 0b       	sbc	r30, r20
    1bb8:	f5 0b       	sbc	r31, r21

00001bba <__udivmodsi4_ep>:
    1bba:	66 1f       	adc	r22, r22
    1bbc:	77 1f       	adc	r23, r23
    1bbe:	88 1f       	adc	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	1a 94       	dec	r1
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <__udivmodsi4_loop>
    1bc6:	60 95       	com	r22
    1bc8:	70 95       	com	r23
    1bca:	80 95       	com	r24
    1bcc:	90 95       	com	r25
    1bce:	9b 01       	movw	r18, r22
    1bd0:	ac 01       	movw	r20, r24
    1bd2:	bd 01       	movw	r22, r26
    1bd4:	cf 01       	movw	r24, r30
    1bd6:	08 95       	ret

00001bd8 <__tablejump2__>:
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	05 90       	lpm	r0, Z+
    1bde:	f4 91       	lpm	r31, Z
    1be0:	e0 2d       	mov	r30, r0
    1be2:	09 94       	ijmp

00001be4 <__umulhisi3>:
    1be4:	a2 9f       	mul	r26, r18
    1be6:	b0 01       	movw	r22, r0
    1be8:	b3 9f       	mul	r27, r19
    1bea:	c0 01       	movw	r24, r0
    1bec:	a3 9f       	mul	r26, r19
    1bee:	70 0d       	add	r23, r0
    1bf0:	81 1d       	adc	r24, r1
    1bf2:	11 24       	eor	r1, r1
    1bf4:	91 1d       	adc	r25, r1
    1bf6:	b2 9f       	mul	r27, r18
    1bf8:	70 0d       	add	r23, r0
    1bfa:	81 1d       	adc	r24, r1
    1bfc:	11 24       	eor	r1, r1
    1bfe:	91 1d       	adc	r25, r1
    1c00:	08 95       	ret

00001c02 <__udivmodhi4>:
    1c02:	aa 1b       	sub	r26, r26
    1c04:	bb 1b       	sub	r27, r27
    1c06:	51 e1       	ldi	r21, 0x11	; 17
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <__udivmodhi4_ep>

00001c0a <__udivmodhi4_loop>:
    1c0a:	aa 1f       	adc	r26, r26
    1c0c:	bb 1f       	adc	r27, r27
    1c0e:	a6 17       	cp	r26, r22
    1c10:	b7 07       	cpc	r27, r23
    1c12:	10 f0       	brcs	.+4      	; 0x1c18 <__udivmodhi4_ep>
    1c14:	a6 1b       	sub	r26, r22
    1c16:	b7 0b       	sbc	r27, r23

00001c18 <__udivmodhi4_ep>:
    1c18:	88 1f       	adc	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	5a 95       	dec	r21
    1c1e:	a9 f7       	brne	.-22     	; 0x1c0a <__udivmodhi4_loop>
    1c20:	80 95       	com	r24
    1c22:	90 95       	com	r25
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	08 95       	ret

00001c2a <_exit>:
    1c2a:	f8 94       	cli

00001c2c <__stop_program>:
    1c2c:	ff cf       	rjmp	.-2      	; 0x1c2c <__stop_program>
